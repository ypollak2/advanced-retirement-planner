{"version":3,"file":"index-DmqpbBDW.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../src/types/index.ts","../../src/utils/currencyAPI.ts","../../src/components/Dashboard.tsx","../../src/utils/taxCalculator.ts","../../src/utils/retirementCalculations.ts","../../src/components/TaxCalculatorDemo.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","// Core Type Definitions for Advanced Retirement Planner TypeScript Version\n// Created by Yali Pollak (יהלי פולק) - v6.0.0-beta.1\n\nimport { z } from 'zod';\n\n// =====================================================\n// ENUMS AND CONSTANTS\n// =====================================================\n\nexport enum Currency {\n  ILS = 'ILS',\n  USD = 'USD',\n  EUR = 'EUR',\n  GBP = 'GBP',\n  BTC = 'BTC',\n  ETH = 'ETH',\n}\n\nexport enum Language {\n  EN = 'en',\n  HE = 'he',\n}\n\nexport enum RiskTolerance {\n  CONSERVATIVE = 'conservative',\n  MODERATE = 'moderate',\n  AGGRESSIVE = 'aggressive',\n}\n\nexport enum PlanningType {\n  INDIVIDUAL = 'individual',\n  COUPLE = 'couple',\n}\n\nexport enum Country {\n  ISRAEL = 'israel',\n  USA = 'usa',\n  UK = 'uk',\n  GERMANY = 'germany',\n  FRANCE = 'france',\n  CANADA = 'canada',\n  AUSTRALIA = 'australia',\n  NETHERLANDS = 'netherlands',\n  SWEDEN = 'sweden',\n  NORWAY = 'norway',\n}\n\nexport enum TaxBracketType {\n  MARGINAL = 'marginal',\n  FLAT = 'flat',\n  PROGRESSIVE = 'progressive',\n}\n\nexport enum DeductionType {\n  STANDARD = 'standard',\n  ITEMIZED = 'itemized',\n  PERSONAL_ALLOWANCE = 'personal_allowance',\n}\n\nexport enum SocialInsuranceType {\n  SOCIAL_SECURITY = 'social_security',\n  MEDICARE = 'medicare',\n  UNEMPLOYMENT = 'unemployment',\n  DISABILITY = 'disability',\n  PENSION_CONTRIBUTION = 'pension_contribution',\n  HEALTH_INSURANCE = 'health_insurance',\n}\n\n// =====================================================\n// ZOD SCHEMAS FOR VALIDATION\n// =====================================================\n\nexport const CurrencySchema = z.nativeEnum(Currency);\nexport const LanguageSchema = z.nativeEnum(Language);\nexport const RiskToleranceSchema = z.nativeEnum(RiskTolerance);\nexport const PlanningTypeSchema = z.nativeEnum(PlanningType);\nexport const CountrySchema = z.nativeEnum(Country);\n\n// =====================================================\n// FINANCIAL INPUT TYPES\n// =====================================================\n\nexport const BasicInputsSchema = z.object({\n  currentAge: z.number().min(18).max(100),\n  retirementAge: z.number().min(50).max(100),\n  currentSalary: z.number().min(0),\n  currentSavings: z.number().min(0),\n  monthlyContribution: z.number().min(0),\n  currentMonthlyExpenses: z.number().min(0),\n  targetReplacement: z.number().min(0).max(100),\n  riskTolerance: RiskToleranceSchema,\n  planningType: PlanningTypeSchema,\n  workingCurrency: CurrencySchema,\n});\n\nexport const AdvancedInputsSchema = BasicInputsSchema.extend({\n  currentPersonalPortfolio: z.number().min(0).optional(),\n  currentRealEstate: z.number().min(0).optional(),\n  currentCrypto: z.number().min(0).optional(),\n  expectedInflation: z.number().min(0).max(20).optional(),\n  expectedReturn: z.number().min(0).max(30).optional(),\n  salaryGrowthRate: z.number().min(0).max(20).optional(),\n  retirementDuration: z.number().min(1).max(50).optional(),\n  healthcareCosts: z.number().min(0).optional(),\n  legacyGoal: z.number().min(0).optional(),\n});\n\nexport const PartnerInputsSchema = z.object({\n  partnerCurrentAge: z.number().min(18).max(100),\n  partnerRetirementAge: z.number().min(50).max(100),\n  partnerCurrentSalary: z.number().min(0),\n  partnerSavings: z.number().min(0),\n  partnerMonthlyContribution: z.number().min(0),\n  partnerRiskTolerance: RiskToleranceSchema,\n});\n\nexport type BasicInputs = z.infer<typeof BasicInputsSchema>;\nexport type AdvancedInputs = z.infer<typeof AdvancedInputsSchema>;\nexport type PartnerInputs = z.infer<typeof PartnerInputsSchema>;\n\n// =====================================================\n// FINANCIAL CALCULATION TYPES\n// =====================================================\n\nexport interface FinancialResults {\n  readonly totalSavings: number;\n  readonly monthlyPension: number;\n  readonly replacementRatio: number;\n  readonly shortfall: number;\n  readonly projectedNetWorth: number;\n  readonly yearlyBreakdown: readonly YearlyBreakdown[];\n  readonly readinessScore: number;\n  readonly recommendations: readonly string[];\n}\n\nexport interface YearlyBreakdown {\n  readonly year: number;\n  readonly age: number;\n  readonly contribution: number;\n  readonly balance: number;\n  readonly pensionPayment: number;\n  readonly expenses: number;\n  readonly netWorth: number;\n}\n\nexport interface PartnerResults extends FinancialResults {\n  readonly combinedResults: FinancialResults;\n}\n\n// =====================================================\n// COMPONENT PROP TYPES\n// =====================================================\n\nexport interface BaseComponentProps {\n  readonly language: Language;\n  readonly workingCurrency: Currency;\n}\n\nexport interface DashboardProps extends BaseComponentProps {\n  readonly inputs: BasicInputs | AdvancedInputs;\n  readonly results: FinancialResults;\n  readonly formatCurrency: (amount: number) => string;\n  readonly onSectionExpand?: (sectionId: string, expanded: boolean) => void;\n}\n\nexport interface InputComponentProps extends BaseComponentProps {\n  readonly inputs: BasicInputs | AdvancedInputs;\n  readonly onInputsChange: (inputs: BasicInputs | AdvancedInputs) => void;\n  readonly onCalculate: () => void;\n}\n\nexport interface ResultsComponentProps extends BaseComponentProps {\n  readonly inputs: BasicInputs | AdvancedInputs;\n  readonly results: FinancialResults;\n  readonly partnerResults?: PartnerResults;\n  readonly formatCurrency: (amount: number) => string;\n}\n\n// =====================================================\n// CURRENCY AND EXCHANGE TYPES\n// =====================================================\n\nexport interface ExchangeRates {\n  readonly [key: string]: number;\n}\n\nexport interface CurrencyInfo {\n  readonly code: Currency;\n  readonly symbol: string;\n  readonly name: string;\n  readonly decimals: number;\n  readonly isStable: boolean;\n}\n\nexport interface ConversionResult {\n  readonly originalAmount: number;\n  readonly convertedAmount: number;\n  readonly fromCurrency: Currency;\n  readonly toCurrency: Currency;\n  readonly rate: number;\n  readonly timestamp: Date;\n}\n\n// =====================================================\n// API AND EXTERNAL SERVICE TYPES\n// =====================================================\n\nexport interface StockPrice {\n  readonly symbol: string;\n  readonly price: number;\n  readonly change: number;\n  readonly changePercent: number;\n  readonly timestamp: Date;\n}\n\nexport interface MarketData {\n  readonly stocks: readonly StockPrice[];\n  readonly exchangeRates: ExchangeRates;\n  readonly lastUpdated: Date;\n}\n\n// =====================================================\n// TESTING AND STRESS TEST TYPES\n// =====================================================\n\nexport interface StressTestScenario {\n  readonly id: string;\n  readonly name: string;\n  readonly description: string;\n  readonly marketCrashYear?: number;\n  readonly marketCrashSeverity?: number;\n  readonly inflationSpike?: number;\n  readonly salaryFreezeYears?: number[];\n  readonly healthcareCostMultiplier?: number;\n}\n\nexport interface StressTestResult {\n  readonly scenario: StressTestScenario;\n  readonly results: FinancialResults;\n  readonly impact: {\n    readonly totalSavingsImpact: number;\n    readonly replacementRatioImpact: number;\n    readonly readinessScoreImpact: number;\n  };\n}\n\n// =====================================================\n// EXPORT TYPES\n// =====================================================\n\nexport interface ExportOptions {\n  readonly format: 'json' | 'pdf' | 'png';\n  readonly includeCharts: boolean;\n  readonly includeStressTests: boolean;\n  readonly currency: Currency;\n  readonly language: Language;\n}\n\nexport interface ExportData {\n  readonly metadata: {\n    readonly exportDate: Date;\n    readonly version: string;\n    readonly currency: Currency;\n    readonly language: Language;\n  };\n  readonly inputs: BasicInputs | AdvancedInputs;\n  readonly results: FinancialResults;\n  readonly partnerResults?: PartnerResults;\n  readonly stressTestResults?: readonly StressTestResult[];\n}\n\n// =====================================================\n// UTILITY TYPES\n// =====================================================\n\nexport type DeepReadonly<T> = {\n  readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P];\n};\n\nexport type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;\n\n// Type guards\nexport const isBasicInputs = (inputs: unknown): inputs is BasicInputs => {\n  return BasicInputsSchema.safeParse(inputs).success;\n};\n\nexport const isAdvancedInputs = (inputs: unknown): inputs is AdvancedInputs => {\n  return AdvancedInputsSchema.safeParse(inputs).success;\n};\n\nexport const isCurrency = (value: unknown): value is Currency => {\n  return Object.values(Currency).includes(value as Currency);\n};\n\nexport const isLanguage = (value: unknown): value is Language => {\n  return Object.values(Language).includes(value as Language);\n};\n\n// =====================================================\n// ERROR TYPES\n// =====================================================\n\nexport class ValidationError extends Error {\n  constructor(\n    message: string,\n    public readonly field: string,\n    public readonly value: unknown\n  ) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n\nexport class CalculationError extends Error {\n  constructor(message: string, public readonly context?: Record<string, unknown>) {\n    super(message);\n    this.name = 'CalculationError';\n  }\n}\n\nexport class CurrencyConversionError extends Error {\n  constructor(\n    message: string,\n    public readonly fromCurrency: Currency,\n    public readonly toCurrency: Currency\n  ) {\n    super(message);\n    this.name = 'CurrencyConversionError';\n  }\n}\n\nexport class TaxCalculationError extends Error {\n  constructor(\n    message: string,\n    public readonly country: Country,\n    public readonly grossSalary: number\n  ) {\n    super(message);\n    this.name = 'TaxCalculationError';\n  }\n}\n\n// =====================================================\n// TAX CALCULATION TYPES\n// =====================================================\n\nexport interface TaxBracket {\n  readonly min: number;\n  readonly max: number | null; // null means no upper limit\n  readonly rate: number; // percentage (e.g., 22 for 22%)\n}\n\nexport interface SocialInsurance {\n  readonly type: SocialInsuranceType;\n  readonly rate: number; // percentage\n  readonly cap?: number; // maximum income subject to this tax\n  readonly employerContribution?: number; // employer's portion\n  readonly description: string;\n}\n\nexport interface TaxDeduction {\n  readonly type: DeductionType;\n  readonly amount: number;\n  readonly description: string;\n  readonly conditions?: string[];\n}\n\nexport interface CountryTaxRule {\n  readonly country: Country;\n  readonly currency: Currency;\n  readonly year: number;\n  readonly taxBrackets: readonly TaxBracket[];\n  readonly socialInsurances: readonly SocialInsurance[];\n  readonly deductions: readonly TaxDeduction[];\n  readonly bracketType: TaxBracketType;\n  readonly description: string;\n  readonly lastUpdated: Date;\n}\n\nexport interface TaxCalculationResult {\n  readonly grossSalary: number;\n  readonly taxableIncome: number;\n  readonly incomeTax: number;\n  readonly socialInsuranceTax: number;\n  readonly totalTax: number;\n  readonly netSalary: number;\n  readonly effectiveTaxRate: number; // percentage\n  readonly marginalTaxRate: number; // percentage\n  readonly country: Country;\n  readonly currency: Currency;\n  readonly breakdown: {\n    readonly deductions: readonly {\n      readonly type: string;\n      readonly amount: number;\n      readonly description: string;\n    }[];\n    readonly taxBracketDetails: readonly {\n      readonly min: number;\n      readonly max: number | null;\n      readonly rate: number;\n      readonly taxAmount: number;\n      readonly incomeInBracket: number;\n    }[];\n    readonly socialInsuranceDetails: readonly {\n      readonly type: string;\n      readonly rate: number;\n      readonly amount: number;\n      readonly description: string;\n    }[];\n  };\n}","// Currency Exchange Rate API - TypeScript Implementation\n// Created by Yali Pollak (יהלי פולק) - v6.0.0-beta.1\n\nimport {\n  Currency,\n  Language,\n  type ExchangeRates,\n  type ConversionResult,\n  type CurrencyConversionError,\n} from '@/types';\n\ninterface APIEndpoint {\n  readonly name: string;\n  readonly url: string | null;\n  readonly parse: (data: unknown) => ExchangeRates;\n}\n\ninterface CacheStatus {\n  readonly isValid: boolean;\n  readonly lastUpdated: number | null;\n  readonly cacheSize: number;\n  readonly timeToExpiry: number;\n}\n\ninterface CurrencySymbols {\n  readonly [key in Currency]: string;\n}\n\nexport class CurrencyAPI {\n  private readonly cache = new Map<Currency, number>();\n  private lastUpdated: number | null = null;\n  private readonly cacheTimeout = 5 * 60 * 1000; // 5 minutes\n\n  private readonly fallbackRates: Readonly<Record<Currency, number>> = {\n    [Currency.ILS]: 1,\n    [Currency.USD]: 3.7,\n    [Currency.GBP]: 4.65,\n    [Currency.EUR]: 4.02,\n    [Currency.BTC]: 0.0000025, // ~40,000 USD per BTC\n    [Currency.ETH]: 0.00035, // ~2,850 USD per ETH\n  } as const;\n\n  private readonly currencySymbols: CurrencySymbols = {\n    [Currency.ILS]: '₪',\n    [Currency.USD]: '$',\n    [Currency.GBP]: '£',\n    [Currency.EUR]: '€',\n    [Currency.BTC]: '₿',\n    [Currency.ETH]: 'Ξ',\n  } as const;\n\n  private readonly apiEndpoints: readonly APIEndpoint[] = [\n    {\n      name: 'ExchangeRate-API',\n      url: 'https://api.exchangerate-api.com/v4/latest/ILS',\n      parse: (data: unknown): ExchangeRates => {\n        const typedData = data as { rates: Record<string, number> };\n        const rates = typedData.rates;\n        return {\n          [Currency.USD]: 1 / (rates.USD || 0.27),\n          [Currency.EUR]: 1 / (rates.EUR || 0.25),\n          [Currency.GBP]: 1 / (rates.GBP || 0.22),\n        };\n      },\n    },\n    {\n      name: 'CoinGecko-Fiat',\n      url: 'https://api.coingecko.com/api/v3/simple/price?ids=usd,eur,gbp&vs_currencies=ils',\n      parse: (data: unknown): ExchangeRates => {\n        const typedData = data as {\n          usd?: { ils: number };\n          eur?: { ils: number };\n          gbp?: { ils: number };\n        };\n        return {\n          [Currency.USD]: typedData.usd?.ils || 3.7,\n          [Currency.EUR]: typedData.eur?.ils || 4.0,\n          [Currency.GBP]: typedData.gbp?.ils || 4.6,\n        };\n      },\n    },\n    {\n      name: 'CoinGecko-Crypto',\n      url: 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum&vs_currencies=ils',\n      parse: (data: unknown): ExchangeRates => {\n        const typedData = data as {\n          bitcoin?: { ils: number };\n          ethereum?: { ils: number };\n        };\n        return {\n          [Currency.BTC]: 1 / (typedData.bitcoin?.ils || 150000),\n          [Currency.ETH]: 1 / (typedData.ethereum?.ils || 10000),\n        };\n      },\n    },\n    {\n      name: 'Fallback-Priority',\n      url: null,\n      parse: (): ExchangeRates => this.fallbackRates,\n    },\n  ] as const;\n\n  /**\n   * Check if cache is valid based on timeout\n   */\n  private isCacheValid(): boolean {\n    return (\n      this.lastUpdated !== null &&\n      Date.now() - this.lastUpdated < this.cacheTimeout\n    );\n  }\n\n  /**\n   * Get cached rates if valid, otherwise return null\n   */\n  public getCachedRates(): ExchangeRates | null {\n    if (this.isCacheValid() && this.cache.size > 0) {\n      return Object.fromEntries(this.cache) as ExchangeRates;\n    }\n    return null;\n  }\n\n  /**\n   * Fetch exchange rates from a single API endpoint\n   */\n  private async fetchFromEndpoint(endpoint: APIEndpoint): Promise<ExchangeRates | null> {\n    if (endpoint.url === null) {\n      return endpoint.parse({});\n    }\n\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000);\n\n      const response = await fetch(endpoint.url, {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data: unknown = await response.json();\n      return endpoint.parse(data);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      console.warn(`CurrencyAPI: ${endpoint.name} failed:`, errorMessage);\n      return null;\n    }\n  }\n\n  /**\n   * Fetch exchange rates with fallback system (CORS-safe version)\n   */\n  public async fetchExchangeRates(): Promise<ExchangeRates> {\n    // Check cache first\n    const cachedRates = this.getCachedRates();\n    if (cachedRates !== null) {\n      return cachedRates;\n    }\n\n    // Always use fallback rates to avoid CORS issues in production\n    console.log('CurrencyAPI: Using fallback rates (API calls disabled to prevent CORS errors)');\n    \n    const rates: ExchangeRates = {\n      [Currency.USD]: 3.7, // 1 ILS = 0.27 USD\n      [Currency.EUR]: 4.02, // 1 ILS = 0.25 EUR\n      [Currency.GBP]: 4.65, // 1 ILS = 0.21 GBP\n      [Currency.BTC]: 150000, // 1 ILS = 0.0000067 BTC (Bitcoin ~$45k)\n      [Currency.ETH]: 10000, // 1 ILS = 0.0001 ETH (Ethereum ~$3k)\n    };\n\n    // Update cache\n    this.cache.clear();\n    Object.entries(rates).forEach(([currency, rate]) => {\n      this.cache.set(currency as Currency, rate);\n    });\n    this.lastUpdated = Date.now();\n\n    console.log('CurrencyAPI: Updated rates using fallback values');\n    return rates;\n  }\n\n  /**\n   * Get exchange rate between two currencies\n   */\n  public async getRate(fromCurrency: Currency, toCurrency: Currency = Currency.ILS): Promise<number> {\n    const rates = await this.fetchExchangeRates();\n\n    if (fromCurrency === toCurrency) return 1;\n    if (fromCurrency === Currency.ILS) return rates[toCurrency] || 1;\n    if (toCurrency === Currency.ILS) return 1 / (rates[fromCurrency] || 1);\n\n    // Cross currency conversion (e.g., USD to EUR)\n    const fromRate = rates[fromCurrency] || 1;\n    const toRate = rates[toCurrency] || 1;\n    return toRate / fromRate;\n  }\n\n  /**\n   * Convert amount between currencies with detailed result\n   */\n  public async convertAmount(\n    amount: number,\n    fromCurrency: Currency,\n    toCurrency: Currency = Currency.ILS\n  ): Promise<ConversionResult> {\n    if (amount < 0) {\n      throw new CurrencyConversionError(\n        'Amount cannot be negative',\n        fromCurrency,\n        toCurrency\n      );\n    }\n\n    const rate = await this.getRate(fromCurrency, toCurrency);\n    const convertedAmount = amount * rate;\n\n    return {\n      originalAmount: amount,\n      convertedAmount,\n      fromCurrency,\n      toCurrency,\n      rate,\n      timestamp: new Date(),\n    };\n  }\n\n  /**\n   * Simple amount conversion (backward compatibility)\n   */\n  public async convertAmountSimple(\n    amount: number,\n    fromCurrency: Currency,\n    toCurrency: Currency = Currency.ILS\n  ): Promise<number> {\n    const result = await this.convertAmount(amount, fromCurrency, toCurrency);\n    return result.convertedAmount;\n  }\n\n  /**\n   * Format currency with proper symbol and locale-aware formatting\n   */\n  public formatCurrency(\n    amount: number,\n    currency: Currency = Currency.ILS,\n    language: Language = Language.HE\n  ): string {\n    const symbol = this.currencySymbols[currency];\n    const locale = language === Language.HE ? 'he-IL' : 'en-US';\n\n    if (currency === Currency.BTC || currency === Currency.ETH) {\n      return `${symbol}${amount.toFixed(6)}`;\n    }\n\n    try {\n      const formatter = new Intl.NumberFormat(locale, {\n        style: 'decimal',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      });\n      return `${symbol}${formatter.format(Math.round(amount))}`;\n    } catch (error) {\n      console.warn('Currency formatting failed, using fallback:', error);\n      return `${symbol}${Math.round(amount).toLocaleString()}`;\n    }\n  }\n\n  /**\n   * Get currency symbol for a given currency\n   */\n  public getCurrencySymbol(currency: Currency): string {\n    return this.currencySymbols[currency];\n  }\n\n  /**\n   * Get last update timestamp\n   */\n  public getLastUpdated(): number | null {\n    return this.lastUpdated;\n  }\n\n  /**\n   * Force refresh rates by clearing cache\n   */\n  public async forceRefresh(): Promise<ExchangeRates> {\n    this.cache.clear();\n    this.lastUpdated = null;\n    return await this.fetchExchangeRates();\n  }\n\n  /**\n   * Get detailed cache status information\n   */\n  public getCacheStatus(): CacheStatus {\n    return {\n      isValid: this.isCacheValid(),\n      lastUpdated: this.lastUpdated,\n      cacheSize: this.cache.size,\n      timeToExpiry: this.lastUpdated\n        ? Math.max(0, this.cacheTimeout - (Date.now() - this.lastUpdated))\n        : 0,\n    };\n  }\n\n  /**\n   * Get all supported currencies\n   */\n  public getSupportedCurrencies(): readonly Currency[] {\n    return Object.values(Currency);\n  }\n\n  /**\n   * Check if a currency is supported\n   */\n  public isCurrencySupported(currency: string): currency is Currency {\n    return Object.values(Currency).includes(currency as Currency);\n  }\n}\n\n// Create and export singleton instance\nexport const currencyAPI = new CurrencyAPI();\n\n// Default export for convenience\nexport default currencyAPI;\n\n// Error class for currency conversion errors\nexport class CurrencyConversionError extends Error {\n  constructor(\n    message: string,\n    public readonly fromCurrency: Currency,\n    public readonly toCurrency: Currency\n  ) {\n    super(message);\n    this.name = 'CurrencyConversionError';\n  }\n}\n\n// Initialize rates when module loads (if in browser environment)\nif (typeof window !== 'undefined') {\n  // Make available globally for backward compatibility\n  (window as any).CurrencyAPI = CurrencyAPI;\n  (window as any).currencyAPI = currencyAPI;\n\n  // Backward compatibility functions\n  (window as any).fetchExchangeRates = (): Promise<ExchangeRates> =>\n    currencyAPI.fetchExchangeRates();\n  \n  (window as any).convertCurrency = (\n    amount: number,\n    from: Currency,\n    to: Currency\n  ): Promise<number> => currencyAPI.convertAmountSimple(amount, from, to);\n  \n  (window as any).formatCurrencyAmount = (\n    amount: number,\n    currency: Currency,\n    language: Language\n  ): string => currencyAPI.formatCurrency(amount, currency, language);\n  \n  (window as any).getCurrencyRate = (\n    from: Currency,\n    to: Currency\n  ): Promise<number> => currencyAPI.getRate(from, to);\n\n  // Initialize rates on DOM content loaded\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n      currencyAPI.fetchExchangeRates().catch((error: unknown) => {\n        console.warn('Initial currency rate fetch failed:', error);\n      });\n    });\n  } else {\n    // DOM already loaded\n    currencyAPI.fetchExchangeRates().catch((error: unknown) => {\n      console.warn('Initial currency rate fetch failed:', error);\n    });\n  }\n\n  console.log('CurrencyAPI v6.0.0-beta.1 loaded successfully');\n}","// Dashboard Component - TypeScript Implementation\n// Created by Yali Pollak (יהלי פולק) - v6.0.0-beta.1\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { \n  Currency, \n  Language,\n  type DashboardProps,\n  type ExchangeRates \n} from '@/types';\nimport { currencyAPI } from '@/utils/currencyAPI';\n\ninterface ExpandedSections {\n  pension: boolean;\n  investments: boolean;\n  partner: boolean;\n  scenarios: boolean;\n}\n\ninterface HealthStatus {\n  status: 'excellent' | 'good' | 'needsWork' | 'critical';\n  className: string;\n}\n\ninterface Translations {\n  readonly dashboard: string;\n  readonly healthMeter: string;\n  readonly retirementCountdown: string;\n  readonly netWorth: string;\n  readonly quickActions: string;\n  readonly planPension: string;\n  readonly manageInvestments: string;\n  readonly partnerPlanning: string;\n  readonly testScenarios: string;\n  readonly years: string;\n  readonly untilRetirement: string;\n  readonly excellent: string;\n  readonly good: string;\n  readonly needsWork: string;\n  readonly critical: string;\n  readonly financialHealth: string;\n  readonly currentAge: string;\n  readonly targetAge: string;\n  readonly lastUpdated: string;\n  readonly changeFrom: string;\n  readonly yesterday: string;\n  readonly pensionPlanning: string;\n  readonly investmentPortfolio: string;\n  readonly scenarioTesting: string;\n}\n\nconst TRANSLATIONS: Record<Language, Translations> = {\n  [Language.HE]: {\n    dashboard: 'לוח הבקרה הפיננסי',\n    healthMeter: 'מד בריאות פיננסית',\n    retirementCountdown: 'ספירה לאחור לפרישה',\n    netWorth: 'שווי נטו',\n    quickActions: 'פעולות מהירות',\n    planPension: 'תכנן פנסיה',\n    manageInvestments: 'נהל השקעות',\n    partnerPlanning: 'תכנון משותף',\n    testScenarios: 'בדוק תרחישים',\n    years: 'שנים',\n    untilRetirement: 'עד הפרישה',\n    excellent: 'מעולה',\n    good: 'טוב',\n    needsWork: 'זקוק לשיפור',\n    critical: 'דורש טיפול',\n    financialHealth: 'בריאות פיננסית',\n    currentAge: 'גיל נוכחי',\n    targetAge: 'גיל פרישה',\n    lastUpdated: 'עודכן לאחרונה',\n    changeFrom: 'שינוי מ',\n    yesterday: 'אתמול',\n    pensionPlanning: 'תכנון פנסיה',\n    investmentPortfolio: 'תיק השקעות',\n    scenarioTesting: 'בדיקת תרחישים',\n  },\n  [Language.EN]: {\n    dashboard: 'Financial Dashboard',\n    healthMeter: 'Financial Health Meter',\n    retirementCountdown: 'Retirement Countdown',\n    netWorth: 'Net Worth',\n    quickActions: 'Quick Actions',\n    planPension: 'Plan Pension',\n    manageInvestments: 'Manage Investments',\n    partnerPlanning: 'Partner Planning',\n    testScenarios: 'Test Scenarios',\n    years: 'years',\n    untilRetirement: 'until retirement',\n    excellent: 'Excellent',\n    good: 'Good',\n    needsWork: 'Needs Work',\n    critical: 'Critical',\n    financialHealth: 'Financial Health',\n    currentAge: 'Current Age',\n    targetAge: 'Target Age',\n    lastUpdated: 'Last Updated',\n    changeFrom: 'Change from',\n    yesterday: 'yesterday',\n    pensionPlanning: 'Pension Planning',\n    investmentPortfolio: 'Investment Portfolio',\n    scenarioTesting: 'Scenario Testing',\n  },\n} as const;\n\nexport const Dashboard: React.FC<DashboardProps> = ({\n  inputs,\n  results,\n  language = Language.EN,\n  formatCurrency,\n  onSectionExpand,\n  workingCurrency = Currency.ILS,\n}) => {\n  // State management\n  const [exchangeRates, setExchangeRates] = useState<ExchangeRates>({});\n  const [selectedCurrency, setSelectedCurrency] = useState<Currency>(workingCurrency);\n  const [expandedSections, setExpandedSections] = useState<ExpandedSections>({\n    pension: false,\n    investments: false,\n    partner: false,\n    scenarios: false,\n  });\n\n  // Get translations\n  const t = TRANSLATIONS[language];\n\n  // Load exchange rates\n  useEffect(() => {\n    const loadRates = async (): Promise<void> => {\n      try {\n        const rates = await currencyAPI.fetchExchangeRates();\n        setExchangeRates(rates);\n      } catch (error) {\n        console.warn('Failed to load exchange rates:', error);\n        // Use fallback rates\n        setExchangeRates({\n          [Currency.USD]: 3.7,\n          [Currency.GBP]: 4.6,\n          [Currency.EUR]: 4.0,\n          [Currency.BTC]: 0.000002,\n          [Currency.ETH]: 0.0001,\n        });\n      }\n    };\n\n    void loadRates();\n  }, []);\n\n  // Calculate financial health score (0-100)\n  const calculateHealthScore = useCallback((): number => {\n    if (!inputs || !results) return 0;\n\n    const currentAge = inputs.currentAge;\n    const retirementAge = inputs.retirementAge;\n    const yearsToRetirement = retirementAge - currentAge;\n    const currentSavings = inputs.currentSavings;\n    const monthlyExpenses = inputs.currentMonthlyExpenses;\n    const targetReplacement = inputs.targetReplacement;\n\n    let score = 0;\n\n    // Factor 1: Savings rate (30 points)\n    const annualSavings = inputs.monthlyContribution * 12;\n    const annualIncome = inputs.currentSalary * 12;\n    const savingsRate = annualIncome > 0 ? (annualSavings / annualIncome) * 100 : 0;\n    score += Math.min(savingsRate * 2, 30);\n\n    // Factor 2: Current savings adequacy (25 points)\n    const recommendedSavings = currentAge * annualIncome * 0.01;\n    const savingsAdequacy = recommendedSavings > 0 ? currentSavings / recommendedSavings : 0;\n    score += Math.min(savingsAdequacy * 25, 25);\n\n    // Factor 3: Time horizon (20 points)\n    const timeScore = yearsToRetirement > 30 ? 20 : (yearsToRetirement / 30) * 20;\n    score += timeScore;\n\n    // Factor 4: Risk management (15 points)\n    const riskScore = inputs.riskTolerance === 'aggressive' ? 15 : \n                     inputs.riskTolerance === 'moderate' ? 12 : 8;\n    score += riskScore;\n\n    // Factor 5: Diversification (10 points)\n    const hasPersonalPortfolio = 'currentPersonalPortfolio' in inputs && (inputs.currentPersonalPortfolio || 0) > 0;\n    const hasRealEstate = 'currentRealEstate' in inputs && (inputs.currentRealEstate || 0) > 0;\n    const hasMultipleStreams = hasPersonalPortfolio || hasRealEstate;\n    score += hasMultipleStreams ? 10 : 5;\n\n    return Math.round(Math.min(score, 100));\n  }, [inputs, results]);\n\n  const healthScore = calculateHealthScore();\n\n  // Get health status based on score\n  const getHealthStatus = useCallback((score: number): HealthStatus => {\n    if (score >= 85) return { status: 'excellent', className: 'health-meter-excellent status-excellent' };\n    if (score >= 70) return { status: 'good', className: 'health-meter-good status-good' };\n    if (score >= 50) return { status: 'needsWork', className: 'health-meter-warning status-warning' };\n    return { status: 'critical', className: 'health-meter-critical status-critical' };\n  }, []);\n\n  const healthStatus = getHealthStatus(healthScore);\n\n  // Calculate years until retirement\n  const yearsToRetirement = inputs.retirementAge - inputs.currentAge;\n\n  // Calculate net worth with currency conversion\n  const calculateNetWorth = useCallback((): number => {\n    const baseNetWorth = inputs.currentSavings + \n                        ('currentPersonalPortfolio' in inputs ? inputs.currentPersonalPortfolio || 0 : 0) + \n                        ('currentRealEstate' in inputs ? inputs.currentRealEstate || 0 : 0) + \n                        ('currentCrypto' in inputs ? inputs.currentCrypto || 0 : 0);\n\n    if (selectedCurrency === Currency.ILS) return baseNetWorth;\n    const rate = exchangeRates[selectedCurrency];\n    return rate ? baseNetWorth / rate : baseNetWorth;\n  }, [inputs, selectedCurrency, exchangeRates]);\n\n  const netWorth = calculateNetWorth();\n\n  // Format currency with selected currency\n  const formatSelectedCurrency = useCallback((amount: number): string => {\n    return currencyAPI.formatCurrency(amount, selectedCurrency, language);\n  }, [selectedCurrency, language]);\n\n  // Handle section expansion\n  const toggleSection = useCallback((sectionId: keyof ExpandedSections): void => {\n    setExpandedSections(prev => ({\n      ...prev,\n      [sectionId]: !prev[sectionId],\n    }));\n\n    if (onSectionExpand) {\n      onSectionExpand(sectionId, !expandedSections[sectionId]);\n    }\n  }, [expandedSections, onSectionExpand]);\n\n  // SVG circle calculations for health meter\n  const radius = 120;\n  const circumference = 2 * Math.PI * radius;\n  const strokeDasharray = circumference;\n  const strokeDashoffset = circumference - (healthScore / 100) * circumference;\n\n  return (\n    <div className=\"dashboard-container animate-fade-in-up\">\n      {/* Main Dashboard Content */}\n      <div className=\"space-y-6\">\n        {/* Financial Health Meter */}\n        <div className=\"professional-card text-center\">\n          <h2 className=\"section-title mb-6\">\n            <span>💚</span> {t.healthMeter}\n          </h2>\n          \n          <div className=\"financial-health-meter\">\n            <svg className=\"health-meter-circle\">\n              <circle\n                className=\"health-meter-background\"\n                cx=\"140\"\n                cy=\"140\"\n                r={radius}\n                strokeDasharray={strokeDasharray}\n              />\n              <circle\n                className={`health-meter-progress ${healthStatus.className.split(' ')[0]}`}\n                cx=\"140\"\n                cy=\"140\"\n                r={radius}\n                strokeDasharray={strokeDasharray}\n                strokeDashoffset={strokeDashoffset}\n              />\n            </svg>\n            <div className=\"health-meter-center\">\n              <div className=\"health-score-value\">{healthScore}</div>\n              <div className=\"health-score-label\">{t.financialHealth}</div>\n              <div className={`health-score-status ${healthStatus.className.split(' ')[1] || ''}`}>\n                {t[healthStatus.status]}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Retirement Countdown */}\n        <div className=\"retirement-countdown\">\n          <div>\n            <div className=\"countdown-years\">{yearsToRetirement}</div>\n            <div className=\"countdown-label\">{`${t.years} ${t.untilRetirement}`}</div>\n          </div>\n          <div className=\"countdown-details\">\n            <div>{`${t.currentAge}: ${inputs.currentAge}`}</div>\n            <div>{`${t.targetAge}: ${inputs.retirementAge}`}</div>\n          </div>\n        </div>\n\n        {/* Net Worth Tracker */}\n        <div className=\"net-worth-tracker\">\n          <div className=\"net-worth-header\">\n            <h3 className=\"section-title\">\n              <span>💎</span> {t.netWorth}\n            </h3>\n          </div>\n          <div className=\"net-worth-value\">\n            {formatSelectedCurrency(netWorth)}\n          </div>\n          <div className=\"net-worth-change change-positive\">\n            <span>↗</span> +2.3% {t.changeFrom} {t.yesterday}\n          </div>\n        </div>\n\n        {/* Quick Actions Grid */}\n        <div>\n          <h3 className=\"section-title mb-4\">\n            <span>⚡</span> {t.quickActions}\n          </h3>\n          <div className=\"quick-actions-grid\">\n            <div \n              className=\"quick-action-card\"\n              onClick={() => toggleSection('pension')}\n              role=\"button\"\n              tabIndex={0}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                  toggleSection('pension');\n                }\n              }}\n            >\n              <div className=\"quick-action-icon action-pension\">🏛️</div>\n              <div className=\"quick-action-title\">{t.planPension}</div>\n              <div className=\"quick-action-description\">\n                Set up and optimize pension planning\n              </div>\n            </div>\n\n            <div \n              className=\"quick-action-card\"\n              onClick={() => toggleSection('investments')}\n              role=\"button\"\n              tabIndex={0}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                  toggleSection('investments');\n                }\n              }}\n            >\n              <div className=\"quick-action-icon action-investment\">📈</div>\n              <div className=\"quick-action-title\">{t.manageInvestments}</div>\n              <div className=\"quick-action-description\">\n                Portfolio management and tracking\n              </div>\n            </div>\n\n            <div \n              className=\"quick-action-card\"\n              onClick={() => toggleSection('partner')}\n              role=\"button\"\n              tabIndex={0}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                  toggleSection('partner');\n                }\n              }}\n            >\n              <div className=\"quick-action-icon action-partner\">👥</div>\n              <div className=\"quick-action-title\">{t.partnerPlanning}</div>\n              <div className=\"quick-action-description\">\n                Joint financial planning tools\n              </div>\n            </div>\n\n            <div \n              className=\"quick-action-card\"\n              onClick={() => toggleSection('scenarios')}\n              role=\"button\"\n              tabIndex={0}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                  toggleSection('scenarios');\n                }\n              }}\n            >\n              <div className=\"quick-action-icon action-scenario\">🧪</div>\n              <div className=\"quick-action-title\">{t.testScenarios}</div>\n              <div className=\"quick-action-description\">\n                Stress test different economic scenarios\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Progressive Disclosure Sections */}\n      <div className=\"space-y-4\">\n        {/* Pension Planning Section */}\n        <div className=\"planning-section\">\n          <div \n            className={`section-header ${expandedSections.pension ? 'expanded' : ''}`}\n            onClick={() => toggleSection('pension')}\n            role=\"button\"\n            tabIndex={0}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                toggleSection('pension');\n              }\n            }}\n          >\n            <div className=\"section-title\">\n              <div className=\"section-icon\">🏛️</div>\n              {t.pensionPlanning}\n            </div>\n            <div className={`expand-icon ${expandedSections.pension ? 'expanded' : ''}`}>\n              ▼\n            </div>\n          </div>\n          <div className={`section-content ${expandedSections.pension ? 'expanded' : ''}`}>\n            {expandedSections.pension && (\n              <div>Pension planning content will be rendered here when BasicInputs/AdvancedInputs components are integrated.</div>\n            )}\n          </div>\n        </div>\n\n        {/* Additional sections would follow the same pattern */}\n      </div>\n    </div>\n  );\n};\n\n// Export for backward compatibility\nexport default Dashboard;\n\n// Make available globally for backward compatibility\nif (typeof window !== 'undefined') {\n  (window as any).Dashboard = Dashboard;\n}","// Tax Calculator - Country-Specific Tax Guidelines\n// Created by Yali Pollak (יהלי פולק) - v6.0.0-beta.1\n\nimport {\n  Country,\n  Currency,\n  TaxBracketType,\n  SocialInsuranceType,\n  DeductionType,\n  TaxCalculationError,\n  type CountryTaxRule,\n  type TaxCalculationResult,\n  type TaxBracket,\n  type SocialInsurance,\n  type TaxDeduction,\n} from '@/types';\n\n// =====================================================\n// TAX RULES DATABASE - 2024 TAX YEAR\n// =====================================================\n\nexport class TaxCalculator {\n  private readonly taxRules: Map<Country, CountryTaxRule> = new Map();\n\n  constructor() {\n    this.initializeTaxRules();\n  }\n\n  private initializeTaxRules(): void {\n    // Israel Tax Rules (2024)\n    this.taxRules.set(Country.ISRAEL, {\n      country: Country.ISRAEL,\n      currency: Currency.ILS,\n      year: 2024,\n      bracketType: TaxBracketType.PROGRESSIVE,\n      description: 'Israel Progressive Income Tax System 2024',\n      lastUpdated: new Date('2024-01-01'),\n      taxBrackets: [\n        { min: 0, max: 81240, rate: 10 }, // First bracket: 10%\n        { min: 81241, max: 116760, rate: 14 }, // Second bracket: 14%\n        { min: 116761, max: 187440, rate: 20 }, // Third bracket: 20%\n        { min: 187441, max: 241680, rate: 31 }, // Fourth bracket: 31%\n        { min: 241681, max: 498360, rate: 35 }, // Fifth bracket: 35%\n        { min: 498361, max: 721560, rate: 47 }, // Sixth bracket: 47%\n        { min: 721561, max: null, rate: 50 }, // Top bracket: 50%\n      ],\n      socialInsurances: [\n        {\n          type: SocialInsuranceType.SOCIAL_SECURITY,\n          rate: 12, // Total: 12% (employee 3.5% + employer 8.5%)\n          cap: 47520, // Bituach Leumi cap\n          employerContribution: 8.5,\n          description: 'Bituach Leumi (National Insurance)',\n        },\n        {\n          type: SocialInsuranceType.HEALTH_INSURANCE,\n          rate: 8, // Total: 8% (employee 3.1% + employer 4.9%)\n          employerContribution: 4.9,\n          description: 'Health Insurance Tax',\n        },\n      ],\n      deductions: [\n        {\n          type: DeductionType.PERSONAL_ALLOWANCE,\n          amount: 2640, // Monthly credit point value\n          description: 'Personal Tax Credit (2.64 credit points)',\n        },\n      ],\n    });\n\n    // USA Tax Rules (2024)\n    this.taxRules.set(Country.USA, {\n      country: Country.USA,\n      currency: Currency.USD,\n      year: 2024,\n      bracketType: TaxBracketType.PROGRESSIVE,\n      description: 'US Federal Income Tax System 2024 (Single Filer)',\n      lastUpdated: new Date('2024-01-01'),\n      taxBrackets: [\n        { min: 0, max: 11000, rate: 10 },\n        { min: 11001, max: 44725, rate: 12 },\n        { min: 44726, max: 95375, rate: 22 },\n        { min: 95376, max: 182050, rate: 24 },\n        { min: 182051, max: 231250, rate: 32 },\n        { min: 231251, max: 578125, rate: 35 },\n        { min: 578126, max: null, rate: 37 },\n      ],\n      socialInsurances: [\n        {\n          type: SocialInsuranceType.SOCIAL_SECURITY,\n          rate: 12.4, // Total: 12.4% (employee 6.2% + employer 6.2%)\n          cap: 160200, // 2024 Social Security cap\n          employerContribution: 6.2,\n          description: 'Social Security Tax (OASDI)',\n        },\n        {\n          type: SocialInsuranceType.MEDICARE,\n          rate: 2.9, // Total: 2.9% (employee 1.45% + employer 1.45%)\n          employerContribution: 1.45,\n          description: 'Medicare Tax',\n        },\n      ],\n      deductions: [\n        {\n          type: DeductionType.STANDARD,\n          amount: 14600, // 2024 standard deduction for single filer\n          description: 'Standard Deduction (Single)',\n        },\n      ],\n    });\n\n    // UK Tax Rules (2024-2025)\n    this.taxRules.set(Country.UK, {\n      country: Country.UK,\n      currency: Currency.GBP,\n      year: 2024,\n      bracketType: TaxBracketType.PROGRESSIVE,\n      description: 'UK Income Tax System 2024-2025',\n      lastUpdated: new Date('2024-04-06'),\n      taxBrackets: [\n        { min: 0, max: 12570, rate: 0 }, // Personal allowance\n        { min: 12571, max: 50270, rate: 20 }, // Basic rate\n        { min: 50271, max: 125140, rate: 40 }, // Higher rate\n        { min: 125141, max: null, rate: 45 }, // Additional rate\n      ],\n      socialInsurances: [\n        {\n          type: SocialInsuranceType.SOCIAL_SECURITY,\n          rate: 12, // Total National Insurance (employee portion)\n          cap: 50270, // Reduced rate above this\n          description: 'National Insurance Class 1 (Employee)',\n        },\n      ],\n      deductions: [\n        {\n          type: DeductionType.PERSONAL_ALLOWANCE,\n          amount: 12570, // 2024-2025 personal allowance\n          description: 'Personal Allowance',\n        },\n      ],\n    });\n\n    // Germany Tax Rules (2024)\n    this.taxRules.set(Country.GERMANY, {\n      country: Country.GERMANY,\n      currency: Currency.EUR,\n      year: 2024,\n      bracketType: TaxBracketType.PROGRESSIVE,\n      description: 'Germany Income Tax System 2024',\n      lastUpdated: new Date('2024-01-01'),\n      taxBrackets: [\n        { min: 0, max: 11604, rate: 0 }, // Tax-free allowance\n        { min: 11605, max: 17005, rate: 14 }, // Entry rate (progressive)\n        { min: 17006, max: 66760, rate: 24 }, // Progressive zone\n        { min: 66761, max: 277825, rate: 42 }, // Top rate\n        { min: 277826, max: null, rate: 45 }, // Rich tax\n      ],\n      socialInsurances: [\n        {\n          type: SocialInsuranceType.PENSION_CONTRIBUTION,\n          rate: 18.6, // Total pension insurance\n          cap: 87600, // 2024 contribution ceiling\n          employerContribution: 9.3,\n          description: 'Pension Insurance (Rentenversicherung)',\n        },\n        {\n          type: SocialInsuranceType.UNEMPLOYMENT,\n          rate: 2.6, // Total unemployment insurance\n          cap: 87600,\n          employerContribution: 1.3,\n          description: 'Unemployment Insurance (Arbeitslosenversicherung)',\n        },\n        {\n          type: SocialInsuranceType.HEALTH_INSURANCE,\n          rate: 14.6, // Average health insurance rate\n          cap: 62100,\n          employerContribution: 7.3,\n          description: 'Health Insurance (Krankenversicherung)',\n        },\n      ],\n      deductions: [\n        {\n          type: DeductionType.STANDARD,\n          amount: 1230, // Employee deduction (Arbeitnehmer-Pauschbetrag)\n          description: 'Employee Standard Deduction',\n        },\n      ],\n    });\n\n    console.log('TaxCalculator v6.0.0-beta.1 loaded successfully');\n  }\n\n  /**\n   * Calculate net salary from gross salary for a specific country\n   */\n  public calculateNetSalary(\n    grossSalary: number,\n    country: Country,\n    isAnnual: boolean = true\n  ): TaxCalculationResult {\n    if (grossSalary < 0) {\n      throw new TaxCalculationError('Gross salary cannot be negative', country, grossSalary);\n    }\n\n    const taxRule = this.taxRules.get(country);\n    if (!taxRule) {\n      throw new TaxCalculationError(`Tax rules not available for ${country}`, country, grossSalary);\n    }\n\n    // Convert monthly to annual if needed\n    const annualGrossSalary = isAnnual ? grossSalary : grossSalary * 12;\n\n    // Calculate deductions\n    const totalDeductions = this.calculateDeductions(annualGrossSalary, taxRule);\n    const taxableIncome = Math.max(0, annualGrossSalary - totalDeductions);\n\n    // Calculate income tax\n    const incomeTax = this.calculateIncomeTax(taxableIncome, taxRule);\n\n    // Calculate social insurance taxes\n    const socialInsuranceTax = this.calculateSocialInsurance(annualGrossSalary, taxRule);\n\n    // Calculate totals\n    const totalTax = incomeTax + socialInsuranceTax;\n    const netSalary = annualGrossSalary - totalTax;\n    const effectiveTaxRate = annualGrossSalary > 0 ? (totalTax / annualGrossSalary) * 100 : 0;\n    const marginalTaxRate = this.calculateMarginalTaxRate(taxableIncome, taxRule);\n\n    // Generate detailed breakdown\n    const breakdown = this.generateBreakdown(annualGrossSalary, taxableIncome, taxRule);\n\n    return {\n      grossSalary: annualGrossSalary,\n      taxableIncome,\n      incomeTax,\n      socialInsuranceTax,\n      totalTax,\n      netSalary,\n      effectiveTaxRate,\n      marginalTaxRate,\n      country: taxRule.country,\n      currency: taxRule.currency,\n      breakdown,\n    };\n  }\n\n  /**\n   * Calculate total deductions\n   */\n  private calculateDeductions(grossSalary: number, taxRule: CountryTaxRule): number {\n    return taxRule.deductions.reduce((total, deduction) => {\n      return total + deduction.amount;\n    }, 0);\n  }\n\n  /**\n   * Calculate income tax using progressive brackets\n   */\n  private calculateIncomeTax(taxableIncome: number, taxRule: CountryTaxRule): number {\n    let totalTax = 0;\n    let remainingIncome = taxableIncome;\n\n    for (const bracket of taxRule.taxBrackets) {\n      if (remainingIncome <= 0) break;\n\n      const bracketMin = bracket.min;\n      const bracketMax = bracket.max || Infinity;\n      \n      if (taxableIncome > bracketMin) {\n        const incomeInBracket = Math.min(remainingIncome, bracketMax - bracketMin);\n        const taxInBracket = (incomeInBracket * bracket.rate) / 100;\n        \n        totalTax += taxInBracket;\n        remainingIncome -= incomeInBracket;\n      }\n    }\n\n    return totalTax;\n  }\n\n  /**\n   * Calculate social insurance contributions\n   */\n  private calculateSocialInsurance(grossSalary: number, taxRule: CountryTaxRule): number {\n    return taxRule.socialInsurances.reduce((total, insurance) => {\n      const applicableIncome = insurance.cap ? Math.min(grossSalary, insurance.cap) : grossSalary;\n      const employeeRate = insurance.employerContribution \n        ? insurance.rate - insurance.employerContribution \n        : insurance.rate;\n      \n      return total + (applicableIncome * employeeRate) / 100;\n    }, 0);\n  }\n\n  /**\n   * Calculate marginal tax rate\n   */\n  private calculateMarginalTaxRate(taxableIncome: number, taxRule: CountryTaxRule): number {\n    for (const bracket of taxRule.taxBrackets) {\n      if (taxableIncome >= bracket.min && (bracket.max === null || taxableIncome <= bracket.max)) {\n        return bracket.rate;\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * Generate detailed breakdown\n   */\n  private generateBreakdown(\n    grossSalary: number,\n    taxableIncome: number,\n    taxRule: CountryTaxRule\n  ) {\n    // Deductions breakdown\n    const deductions = taxRule.deductions.map(deduction => ({\n      type: deduction.type,\n      amount: deduction.amount,\n      description: deduction.description,\n    }));\n\n    // Tax bracket breakdown\n    const taxBracketDetails = [];\n    let remainingIncome = taxableIncome;\n\n    for (const bracket of taxRule.taxBrackets) {\n      if (remainingIncome <= 0) break;\n\n      const bracketMin = bracket.min;\n      const bracketMax = bracket.max || Infinity;\n      \n      if (taxableIncome > bracketMin) {\n        const incomeInBracket = Math.min(remainingIncome, bracketMax - bracketMin);\n        const taxAmount = (incomeInBracket * bracket.rate) / 100;\n        \n        taxBracketDetails.push({\n          min: bracketMin,\n          max: bracket.max,\n          rate: bracket.rate,\n          taxAmount,\n          incomeInBracket,\n        });\n        \n        remainingIncome -= incomeInBracket;\n      }\n    }\n\n    // Social insurance breakdown\n    const socialInsuranceDetails = taxRule.socialInsurances.map(insurance => {\n      const applicableIncome = insurance.cap ? Math.min(grossSalary, insurance.cap) : grossSalary;\n      const employeeRate = insurance.employerContribution \n        ? insurance.rate - insurance.employerContribution \n        : insurance.rate;\n      const amount = (applicableIncome * employeeRate) / 100;\n\n      return {\n        type: insurance.type,\n        rate: employeeRate,\n        amount,\n        description: insurance.description,\n      };\n    });\n\n    return {\n      deductions,\n      taxBracketDetails,\n      socialInsuranceDetails,\n    };\n  }\n\n  /**\n   * Get available countries\n   */\n  public getAvailableCountries(): Country[] {\n    return Array.from(this.taxRules.keys());\n  }\n\n  /**\n   * Get tax rule for a specific country\n   */\n  public getTaxRule(country: Country): CountryTaxRule | undefined {\n    return this.taxRules.get(country);\n  }\n\n  /**\n   * Check if country is supported\n   */\n  public isCountrySupported(country: Country): boolean {\n    return this.taxRules.has(country);\n  }\n}\n\n// Export singleton instance\nexport const taxCalculator = new TaxCalculator();\n\n// Export for backward compatibility and global access\ndeclare global {\n  interface Window {\n    taxCalculator: TaxCalculator;\n  }\n}\n\nif (typeof window !== 'undefined') {\n  window.taxCalculator = taxCalculator;\n}","// Retirement Calculations - TypeScript Implementation\n// Created by Yali Pollak (יהלי פולק) - v6.0.0-beta.1\n\nimport {\n  Currency,\n  Language,\n  RiskTolerance,\n  Country,\n  ValidationError,\n  CalculationError,\n  type BasicInputs,\n  type AdvancedInputs,\n  type PartnerInputs,\n  type FinancialResults,\n  type PartnerResults,\n  type YearlyBreakdown,\n} from '@/types';\n\nimport { currencyAPI } from './currencyAPI';\nimport { taxCalculator } from './taxCalculator';\n\n// =====================================================\n// INTERFACES FOR CALCULATION INPUTS\n// =====================================================\n\ninterface WorkPeriod {\n  readonly id: number;\n  readonly country: string;\n  readonly startAge: number;\n  readonly endAge: number;\n  readonly monthlyContribution: number;\n  readonly salary: number;\n  readonly pensionReturn: number;\n  readonly pensionDepositFee: number;\n  readonly pensionAnnualFee: number;\n  readonly monthlyTrainingFund: number;\n}\n\ninterface PeriodResult {\n  readonly country: string;\n  readonly countryName: string;\n  readonly flag: string;\n  readonly years: number;\n  readonly contributions: number;\n  readonly netContributions: number;\n  readonly growth: number;\n  readonly pensionReturn: number;\n  readonly pensionDepositFee: number;\n  readonly pensionAnnualFee: number;\n  readonly pensionEffectiveReturn: number;\n  readonly monthlyTrainingFund: number;\n}\n\ninterface IndexAllocation {\n  readonly index: number;\n  readonly percentage: number;\n  readonly customReturn: number | null;\n}\n\ninterface HistoricalReturns {\n  readonly [timeHorizon: number]: readonly number[];\n}\n\ninterface RiskScenario {\n  readonly multiplier: number;\n  readonly name: string;\n  readonly description: string;\n}\n\ninterface CountryData {\n  readonly name: string;\n  readonly flag: string;\n  readonly currency: Currency;\n  readonly taxRates: {\n    readonly income: number;\n    readonly pension: number;\n    readonly capital: number;\n  };\n}\n\n// =====================================================\n// CONSTANTS AND CONFIGURATIONS\n// =====================================================\n\nconst RISK_SCENARIOS: Record<RiskTolerance, RiskScenario> = {\n  conservative: {\n    multiplier: 0.85,\n    name: 'Conservative',\n    description: 'Lower risk, lower return',\n  },\n  moderate: {\n    multiplier: 1.0,\n    name: 'Moderate',\n    description: 'Balanced risk and return',\n  },\n  aggressive: {\n    multiplier: 1.15,\n    name: 'Aggressive',\n    description: 'Higher risk, higher return',\n  },\n} as const;\n\nconst COUNTRY_DATA: Record<string, CountryData> = {\n  israel: {\n    name: 'Israel',\n    flag: '🇮🇱',\n    currency: Currency.ILS,\n    taxRates: { income: 36, pension: 25, capital: 25 },\n  },\n  usa: {\n    name: 'United States',\n    flag: '🇺🇸',\n    currency: Currency.USD,\n    taxRates: { income: 32, pension: 20, capital: 20 },\n  },\n  uk: {\n    name: 'United Kingdom',\n    flag: '🇬🇧',\n    currency: Currency.GBP,\n    taxRates: { income: 40, pension: 25, capital: 20 },\n  },\n  germany: {\n    name: 'Germany',\n    flag: '🇩🇪',\n    currency: Currency.EUR,\n    taxRates: { income: 42, pension: 30, capital: 26 },\n  },\n} as const;\n\n// =====================================================\n// UTILITY FUNCTIONS\n// =====================================================\n\n/**\n * Format currency amount with proper locale and symbol\n */\nexport function formatCurrency(\n  amount: number,\n  currency: Currency = Currency.ILS,\n  language: Language = Language.HE\n): string {\n  return currencyAPI.formatCurrency(amount, currency, language);\n}\n\n/**\n * Convert currency with exchange rates\n */\nexport async function convertCurrency(\n  amount: number,\n  fromCurrency: Currency,\n  toCurrency: Currency\n): Promise<number> {\n  return await currencyAPI.convertAmountSimple(amount, fromCurrency, toCurrency);\n}\n\n/**\n * Calculate net return after management fees\n */\nexport function getNetReturn(grossReturn: number, managementFee: number): number {\n  if (grossReturn < 0 || managementFee < 0) {\n    throw new ValidationError('Returns and fees must be non-negative', 'returns', { grossReturn, managementFee });\n  }\n  return grossReturn - managementFee;\n}\n\n/**\n * Calculate weighted return based on allocations and time horizon\n */\nexport function calculateWeightedReturn(\n  allocations: readonly IndexAllocation[],\n  timeHorizon: number = 20,\n  historicalReturns: HistoricalReturns\n): number {\n  if (timeHorizon <= 0) {\n    throw new ValidationError('Time horizon must be positive', 'timeHorizon', timeHorizon);\n  }\n\n  let totalReturn = 0;\n  let totalPercentage = 0;\n\n  const availableTimeHorizons = [5, 10, 15, 20, 25, 30];\n  const closestTimeHorizon = availableTimeHorizons.reduce((prev, curr) =>\n    Math.abs(curr - timeHorizon) < Math.abs(prev - timeHorizon) ? curr : prev\n  );\n\n  for (const allocation of allocations) {\n    if (allocation.percentage > 0) {\n      const returnRate =\n        allocation.customReturn !== null\n          ? allocation.customReturn\n          : historicalReturns[closestTimeHorizon]?.[allocation.index] || 0;\n\n      totalReturn += (returnRate * allocation.percentage) / 100;\n      totalPercentage += allocation.percentage;\n    }\n  }\n\n  return totalPercentage > 0 ? totalReturn : 0;\n}\n\n/**\n * Adjust return based on risk tolerance\n */\nexport function getAdjustedReturn(\n  baseReturn: number,\n  riskLevel: RiskTolerance = RiskTolerance.MODERATE\n): number {\n  const riskMultiplier = RISK_SCENARIOS[riskLevel]?.multiplier || 1.0;\n  return baseReturn * riskMultiplier;\n}\n\n/**\n * Validate inputs before calculation\n */\nfunction validateInputs(inputs: BasicInputs | AdvancedInputs): void {\n  if (inputs.currentAge >= inputs.retirementAge) {\n    throw new ValidationError(\n      'Retirement age must be greater than current age',\n      'retirementAge',\n      inputs.retirementAge\n    );\n  }\n\n  if (inputs.currentAge < 18 || inputs.currentAge > 100) {\n    throw new ValidationError('Current age must be between 18 and 100', 'currentAge', inputs.currentAge);\n  }\n\n  if (inputs.retirementAge < 50 || inputs.retirementAge > 100) {\n    throw new ValidationError(\n      'Retirement age must be between 50 and 100',\n      'retirementAge',\n      inputs.retirementAge\n    );\n  }\n\n  if (inputs.currentSalary < 0) {\n    throw new ValidationError('Current salary cannot be negative', 'currentSalary', inputs.currentSalary);\n  }\n\n  if (inputs.monthlyContribution < 0) {\n    throw new ValidationError(\n      'Monthly contribution cannot be negative',\n      'monthlyContribution',\n      inputs.monthlyContribution\n    );\n  }\n}\n\n// =====================================================\n// MAIN CALCULATION FUNCTIONS\n// =====================================================\n\n/**\n * Calculate retirement projections based on inputs and work periods\n */\nexport function calculateRetirement(\n  inputs: BasicInputs | AdvancedInputs,\n  workPeriods: readonly WorkPeriod[],\n  pensionIndexAllocation: readonly IndexAllocation[],\n  trainingFundIndexAllocation: readonly IndexAllocation[],\n  historicalReturns: HistoricalReturns,\n  monthlyTrainingFundContribution: number,\n  partnerWorkPeriods: readonly WorkPeriod[] = []\n): FinancialResults {\n  try {\n    // Validate inputs\n    validateInputs(inputs);\n\n    const yearsToRetirement = inputs.retirementAge - inputs.currentAge;\n\n    if (yearsToRetirement <= 0) {\n      throw new CalculationError('Years to retirement must be positive', { yearsToRetirement });\n    }\n\n    // Calculate weighted returns\n    const basePensionWeightedReturn = calculateWeightedReturn(\n      pensionIndexAllocation,\n      yearsToRetirement,\n      historicalReturns\n    );\n    const baseTrainingFundWeightedReturn = calculateWeightedReturn(\n      trainingFundIndexAllocation,\n      yearsToRetirement,\n      historicalReturns\n    );\n\n    const pensionWeightedReturn = getAdjustedReturn(basePensionWeightedReturn, inputs.riskTolerance);\n    const trainingFundWeightedReturn = getAdjustedReturn(baseTrainingFundWeightedReturn, inputs.riskTolerance);\n\n    // Initialize values\n    let totalPensionSavings = inputs.currentSavings;\n    const currentTrainingFund = 'currentTrainingFund' in inputs ? inputs.currentTrainingFund || 0 : 0;\n    const currentPersonalPortfolio = 'currentPersonalPortfolio' in inputs ? inputs.currentPersonalPortfolio || 0 : 0;\n    const currentCrypto = 'currentCrypto' in inputs ? inputs.currentCrypto || 0 : 0;\n    const currentRealEstate = 'currentRealEstate' in inputs ? inputs.currentRealEstate || 0 : 0;\n\n    let totalTrainingFund = currentTrainingFund;\n    let totalPersonalPortfolio = currentPersonalPortfolio;\n    let totalCrypto = currentCrypto;\n    let totalRealEstate = currentRealEstate;\n\n    const periodResults: PeriodResult[] = [];\n\n    // Sort work periods by start age\n    const sortedPeriods = [...workPeriods].sort((a, b) => a.startAge - b.startAge);\n\n    // Calculate pension savings from work periods\n    for (const period of sortedPeriods) {\n      const country = COUNTRY_DATA[period.country];\n      if (!country) {\n        console.warn(`Unknown country: ${period.country}`);\n        continue;\n      }\n\n      const periodYears = Math.max(\n        0,\n        Math.min(period.endAge, inputs.retirementAge) - Math.max(period.startAge, inputs.currentAge)\n      );\n\n      if (periodYears > 0) {\n        const adjustedPensionReturn = getAdjustedReturn(period.pensionReturn, inputs.riskTolerance);\n        const effectiveReturn = adjustedPensionReturn - period.pensionAnnualFee;\n        const monthlyReturn = effectiveReturn / 100 / 12;\n        const periodMonths = periodYears * 12;\n\n        const existingGrowth = totalPensionSavings * Math.pow(1 + monthlyReturn, periodMonths);\n\n        const netMonthlyContribution = period.monthlyContribution * (1 - period.pensionDepositFee / 100);\n        const contributionsValue =\n          monthlyReturn !== 0\n            ? (netMonthlyContribution * (Math.pow(1 + monthlyReturn, periodMonths) - 1)) / monthlyReturn\n            : netMonthlyContribution * periodMonths;\n\n        const newTotal = existingGrowth + contributionsValue;\n\n        periodResults.push({\n          country: period.country,\n          countryName: country.name,\n          flag: country.flag,\n          years: periodYears,\n          contributions: period.monthlyContribution * periodMonths,\n          netContributions: netMonthlyContribution * periodMonths,\n          growth: newTotal - totalPensionSavings,\n          pensionReturn: adjustedPensionReturn,\n          pensionDepositFee: period.pensionDepositFee,\n          pensionAnnualFee: period.pensionAnnualFee,\n          pensionEffectiveReturn: effectiveReturn,\n          monthlyTrainingFund: period.monthlyTrainingFund,\n        });\n\n        totalPensionSavings = newTotal;\n      }\n    }\n\n    // Calculate training fund growth\n    const trainingFundReturn = 'trainingFundReturn' in inputs ? inputs.trainingFundReturn || 7 : 7;\n    const trainingFundManagementFee = 'trainingFundManagementFee' in inputs ? inputs.trainingFundManagementFee || 1 : 1;\n    \n    const adjustedTrainingFundReturn = getAdjustedReturn(trainingFundReturn, inputs.riskTolerance);\n    const trainingFundNetReturn = adjustedTrainingFundReturn - trainingFundManagementFee;\n\n    totalTrainingFund = totalTrainingFund * Math.pow(1 + trainingFundNetReturn / 100, yearsToRetirement);\n\n    // Add training fund contributions from work periods\n    for (const period of sortedPeriods) {\n      const periodYears = Math.max(\n        0,\n        Math.min(period.endAge, inputs.retirementAge) - Math.max(period.startAge, inputs.currentAge)\n      );\n      if (periodYears > 0) {\n        const monthlyReturn = trainingFundNetReturn / 100 / 12;\n        const periodMonths = periodYears * 12;\n        const contributionsValue =\n          monthlyReturn !== 0\n            ? (monthlyTrainingFundContribution * (Math.pow(1 + monthlyReturn, periodMonths) - 1)) / monthlyReturn\n            : monthlyTrainingFundContribution * periodMonths;\n        totalTrainingFund += contributionsValue;\n      }\n    }\n\n    // Calculate other investments (if advanced inputs)\n    if ('personalPortfolioReturn' in inputs) {\n      const personalPortfolioReturn = inputs.personalPortfolioReturn || 8;\n      const personalPortfolioMonthly = inputs.personalPortfolioMonthly || 0;\n      \n      const adjustedPersonalPortfolioReturn = getAdjustedReturn(personalPortfolioReturn, inputs.riskTolerance);\n      const personalPortfolioMonthlyReturn = adjustedPersonalPortfolioReturn / 100 / 12;\n      const personalPortfolioMonths = yearsToRetirement * 12;\n\n      const personalPortfolioGrowth = totalPersonalPortfolio * Math.pow(1 + personalPortfolioMonthlyReturn, personalPortfolioMonths);\n      const personalPortfolioContributions =\n        personalPortfolioMonthlyReturn !== 0\n          ? (personalPortfolioMonthly * (Math.pow(1 + personalPortfolioMonthlyReturn, personalPortfolioMonths) - 1)) / personalPortfolioMonthlyReturn\n          : personalPortfolioMonthly * personalPortfolioMonths;\n      totalPersonalPortfolio = personalPortfolioGrowth + personalPortfolioContributions;\n    }\n\n    if ('cryptoReturn' in inputs) {\n      const cryptoReturn = inputs.cryptoReturn || 12;\n      const cryptoMonthly = inputs.cryptoMonthly || 0;\n      \n      const adjustedCryptoReturn = getAdjustedReturn(cryptoReturn, inputs.riskTolerance);\n      const cryptoMonthlyReturn = adjustedCryptoReturn / 100 / 12;\n      const cryptoMonths = yearsToRetirement * 12;\n\n      const cryptoGrowth = totalCrypto * Math.pow(1 + cryptoMonthlyReturn, cryptoMonths);\n      const cryptoContributions =\n        cryptoMonthlyReturn !== 0\n          ? (cryptoMonthly * (Math.pow(1 + cryptoMonthlyReturn, cryptoMonths) - 1)) / cryptoMonthlyReturn\n          : cryptoMonthly * cryptoMonths;\n      totalCrypto = cryptoGrowth + cryptoContributions;\n    }\n\n    if ('realEstateReturn' in inputs) {\n      const realEstateReturn = inputs.realEstateReturn || 5;\n      const realEstateMonthly = inputs.realEstateMonthly || 0;\n      \n      const adjustedRealEstateReturn = getAdjustedReturn(realEstateReturn, inputs.riskTolerance);\n      const realEstateMonthlyReturn = adjustedRealEstateReturn / 100 / 12;\n      const realEstateMonths = yearsToRetirement * 12;\n\n      const realEstateGrowth = totalRealEstate * Math.pow(1 + realEstateMonthlyReturn, realEstateMonths);\n      const realEstateContributions =\n        realEstateMonthlyReturn !== 0\n          ? (realEstateMonthly * (Math.pow(1 + realEstateMonthlyReturn, realEstateMonths) - 1)) / realEstateMonthlyReturn\n          : realEstateMonthly * realEstateMonths;\n      totalRealEstate = realEstateGrowth + realEstateContributions;\n    }\n\n    // Calculate total savings and retirement metrics\n    const totalSavings = totalPensionSavings + totalTrainingFund + totalPersonalPortfolio + totalCrypto + totalRealEstate;\n\n    // Calculate monthly pension (simplified - 4% withdrawal rule)\n    const monthlyPension = (totalSavings * 0.04) / 12;\n\n    // Calculate replacement ratio\n    const finalSalary = inputs.currentSalary * Math.pow(1.03, yearsToRetirement); // 3% salary growth\n    const replacementRatio = (monthlyPension * 12) / finalSalary * 100;\n\n    // Calculate shortfall\n    const targetIncome = finalSalary * (inputs.targetReplacement / 100);\n    const shortfall = Math.max(0, targetIncome - monthlyPension * 12);\n\n    // Generate yearly breakdown\n    const yearlyBreakdown: YearlyBreakdown[] = [];\n    for (let year = 0; year <= yearsToRetirement; year++) {\n      const age = inputs.currentAge + year;\n      const yearlyContribution = inputs.monthlyContribution * 12;\n      const balance = totalSavings * (year / yearsToRetirement); // Simplified progression\n      \n      yearlyBreakdown.push({\n        year,\n        age,\n        contribution: yearlyContribution,\n        balance,\n        pensionPayment: year === yearsToRetirement ? monthlyPension : 0,\n        expenses: inputs.currentMonthlyExpenses * 12,\n        netWorth: balance,\n      });\n    }\n\n    // Calculate readiness score (0-100)\n    const readinessScore = Math.min(100, Math.max(0, replacementRatio * 1.2)); // Simplified scoring\n\n    // Generate recommendations\n    const recommendations: string[] = [];\n    if (replacementRatio < 80) {\n      recommendations.push('Consider increasing monthly contributions');\n    }\n    if (shortfall > 0) {\n      recommendations.push('You may need additional savings to meet your target');\n    }\n    if (inputs.riskTolerance === RiskTolerance.CONSERVATIVE && yearsToRetirement > 10) {\n      recommendations.push('Consider a more aggressive investment strategy');\n    }\n\n    return {\n      totalSavings,\n      monthlyPension,\n      replacementRatio,\n      shortfall,\n      projectedNetWorth: totalSavings,\n      yearlyBreakdown,\n      readinessScore,\n      recommendations,\n    };\n  } catch (error) {\n    if (error instanceof ValidationError || error instanceof CalculationError) {\n      throw error;\n    }\n    throw new CalculationError('Unexpected error during retirement calculation', { error });\n  }\n}\n\n/**\n * Generate chart data for visualization\n */\nexport function generateChartData(\n  inputs: BasicInputs | AdvancedInputs,\n  results: FinancialResults,\n  chartView: 'combined' | 'partner1' | 'partner2' = 'combined',\n  partnerResults?: PartnerResults\n): Array<{\n  age: number;\n  totalSavings: number;\n  inflationAdjusted: number;\n  pensionSavings: number;\n  trainingFund: number;\n  personalPortfolio: number;\n  crypto: number;\n  realEstate: number;\n}> {\n  const chartData = [];\n  const currentAge = inputs.currentAge;\n  const retirementAge = inputs.retirementAge;\n  const inflationRate = 'expectedInflation' in inputs ? inputs.expectedInflation || 3 : 3;\n\n  // Create a copy of inputs for simulation\n  const simulationInputs = { ...inputs };\n\n  for (let age = currentAge; age <= retirementAge; age++) {\n    const yearsElapsed = age - currentAge;\n    const inflationDivisor = Math.pow(1 + inflationRate / 100, yearsElapsed);\n\n    let dataPoint = {\n      age,\n      totalSavings: results.totalSavings,\n      inflationAdjusted: results.totalSavings / inflationDivisor,\n      pensionSavings: results.totalSavings, // Simplified for chart\n      trainingFund: 0, // Would need separate calculation\n      personalPortfolio: 0,\n      crypto: 0,\n      realEstate: 0,\n    };\n\n    // Handle partner data if in couple planning mode\n    if (inputs.planningType === 'couple' && partnerResults) {\n      // Partner-specific data would be handled here\n      // This is a simplified implementation\n    }\n\n    chartData.push(dataPoint);\n  }\n\n  return chartData;\n}\n\n/**\n * Validate partner data\n */\nexport function validatePartnerData(partnerData: unknown): partnerData is PartnerInputs {\n  if (!partnerData || typeof partnerData !== 'object') {\n    return false;\n  }\n\n  const data = partnerData as Record<string, unknown>;\n  const requiredFields = ['partnerCurrentAge', 'partnerCurrentSalary'];\n  \n  return requiredFields.every(field => \n    field in data && \n    typeof data[field] === 'number' && \n    data[field] !== null && \n    !isNaN(data[field] as number)\n  );\n}\n\n// =====================================================\n// TAX CALCULATION INTEGRATION\n// =====================================================\n\n/**\n * Calculate net salary from gross salary using country-specific tax rules\n * @param grossSalary - Annual gross salary\n * @param country - Country enum value\n * @param isAnnual - Whether the salary is annual (default: true)\n * @returns Object containing gross salary, net salary, and tax breakdown\n */\nexport function calculateNetSalaryFromGross(\n  grossSalary: number, \n  country: string, \n  isAnnual: boolean = true\n): {\n  grossSalary: number;\n  netSalary: number;\n  totalTax: number;\n  effectiveTaxRate: number;\n  taxBreakdown: {\n    incomeTax: number;\n    socialInsurance: number;\n  };\n} {\n  try {\n    // Convert string country to Country enum if needed\n    const countryEnum = country.toLowerCase() as keyof typeof Country;\n    const countryValue = Country[countryEnum.toUpperCase() as keyof typeof Country];\n    \n    if (!countryValue || !taxCalculator.isCountrySupported(countryValue)) {\n      // Fallback to simplified calculation if country not supported\n      console.warn(`Tax calculation not supported for ${country}, using simplified calculation`);\n      const estimatedTaxRate = 0.25; // 25% estimated tax rate\n      const netSalary = grossSalary * (1 - estimatedTaxRate);\n      return {\n        grossSalary,\n        netSalary,\n        totalTax: grossSalary - netSalary,\n        effectiveTaxRate: estimatedTaxRate * 100,\n        taxBreakdown: {\n          incomeTax: grossSalary * 0.15,\n          socialInsurance: grossSalary * 0.10,\n        },\n      };\n    }\n\n    const result = taxCalculator.calculateNetSalary(grossSalary, countryValue, isAnnual);\n    \n    return {\n      grossSalary: result.grossSalary,\n      netSalary: result.netSalary,\n      totalTax: result.totalTax,\n      effectiveTaxRate: result.effectiveTaxRate,\n      taxBreakdown: {\n        incomeTax: result.incomeTax,\n        socialInsurance: result.socialInsuranceTax,\n      },\n    };\n  } catch (error) {\n    // Fallback calculation if tax calculation fails\n    console.warn('Tax calculation failed, using simplified fallback:', error);\n    const estimatedTaxRate = 0.25; // 25% estimated tax rate\n    const netSalary = grossSalary * (1 - estimatedTaxRate);\n    return {\n      grossSalary,\n      netSalary,\n      totalTax: grossSalary - netSalary,\n      effectiveTaxRate: estimatedTaxRate * 100,\n      taxBreakdown: {\n        incomeTax: grossSalary * 0.15,\n        socialInsurance: grossSalary * 0.10,\n      },\n    };\n  }\n}\n\n/**\n * Get available countries for tax calculation\n */\nexport function getAvailableTaxCountries(): string[] {\n  try {\n    return taxCalculator.getAvailableCountries().map(country => country.toString());\n  } catch (error) {\n    console.warn('Could not load available tax countries:', error);\n    return ['israel', 'usa', 'uk', 'germany'];\n  }\n}\n\n/**\n * Check if tax calculation is supported for a country\n */\nexport function isTaxCalculationSupported(country: string): boolean {\n  try {\n    const countryEnum = country.toLowerCase() as keyof typeof Country;\n    const countryValue = Country[countryEnum.toUpperCase() as keyof typeof Country];\n    return countryValue ? taxCalculator.isCountrySupported(countryValue) : false;\n  } catch (error) {\n    return false;\n  }\n}\n\n// =====================================================\n// EXPORT FOR GLOBAL ACCESS (BACKWARD COMPATIBILITY)\n// =====================================================\n\n// Make functions available globally for backward compatibility\nif (typeof window !== 'undefined') {\n  (window as any).formatCurrency = formatCurrency;\n  (window as any).convertCurrency = convertCurrency;\n  (window as any).getNetReturn = getNetReturn;\n  (window as any).calculateWeightedReturn = calculateWeightedReturn;\n  (window as any).getAdjustedReturn = getAdjustedReturn;\n  (window as any).calculateRetirement = calculateRetirement;\n  (window as any).generateChartData = generateChartData;\n  (window as any).validatePartnerData = validatePartnerData;\n  (window as any).calculateNetSalaryFromGross = calculateNetSalaryFromGross;\n  (window as any).getAvailableTaxCountries = getAvailableTaxCountries;\n  (window as any).isTaxCalculationSupported = isTaxCalculationSupported;\n\n  console.log('RetirementCalculations v6.0.0-beta.1 loaded successfully');\n}","// Tax Calculator Demo Component - TypeScript Implementation\n// Created by Yali Pollak (יהלי פולק) - v6.0.0-beta.1\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Country, Currency } from '@/types';\nimport { taxCalculator } from '@/utils/taxCalculator';\nimport { calculateNetSalaryFromGross, getAvailableTaxCountries } from '@/utils/retirementCalculations';\n\ninterface TaxCalculatorDemoProps {\n  className?: string;\n}\n\nconst TaxCalculatorDemo: React.FC<TaxCalculatorDemoProps> = ({ className = '' }) => {\n  const [grossSalary, setGrossSalary] = useState<number>(100000);\n  const [selectedCountry, setSelectedCountry] = useState<string>('israel');\n  const [isAnnual, setIsAnnual] = useState<boolean>(true);\n\n  // Get available countries\n  const availableCountries = useMemo(() => {\n    return getAvailableTaxCountries();\n  }, []);\n\n  // Calculate tax result\n  const taxResult = useMemo(() => {\n    if (grossSalary <= 0) return null;\n    \n    try {\n      return calculateNetSalaryFromGross(grossSalary, selectedCountry, isAnnual);\n    } catch (error) {\n      console.error('Tax calculation error:', error);\n      return null;\n    }\n  }, [grossSalary, selectedCountry, isAnnual]);\n\n  // Get detailed tax breakdown from the tax calculator\n  const detailedResult = useMemo(() => {\n    if (grossSalary <= 0) return null;\n    \n    try {\n      const countryEnum = selectedCountry.toLowerCase() as keyof typeof Country;\n      const countryValue = Country[countryEnum.toUpperCase() as keyof typeof Country];\n      \n      if (!countryValue || !taxCalculator.isCountrySupported(countryValue)) {\n        return null;\n      }\n      \n      return taxCalculator.calculateNetSalary(grossSalary, countryValue, isAnnual);\n    } catch (error) {\n      return null;\n    }\n  }, [grossSalary, selectedCountry, isAnnual]);\n\n  const handleSalaryChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = parseFloat(e.target.value) || 0;\n    setGrossSalary(value);\n  }, []);\n\n  const handleCountryChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedCountry(e.target.value);\n  }, []);\n\n  const handleSalaryTypeChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setIsAnnual(e.target.checked);\n  }, []);\n\n  const formatCurrency = useCallback((amount: number, country: string): string => {\n    const countryEnum = country.toLowerCase() as keyof typeof Country;\n    const countryValue = Country[countryEnum.toUpperCase() as keyof typeof Country];\n    \n    if (!countryValue) return amount.toLocaleString();\n    \n    const currencyMap: Record<Country, Currency> = {\n      [Country.ISRAEL]: Currency.ILS,\n      [Country.USA]: Currency.USD,\n      [Country.UK]: Currency.GBP,\n      [Country.GERMANY]: Currency.EUR,\n      [Country.FRANCE]: Currency.EUR,\n      [Country.CANADA]: Currency.USD,\n      [Country.AUSTRALIA]: Currency.USD,\n      [Country.NETHERLANDS]: Currency.EUR,\n      [Country.SWEDEN]: Currency.EUR,\n      [Country.NORWAY]: Currency.EUR,\n    };\n    \n    const currency = currencyMap[countryValue] || Currency.USD;\n    const currencySymbolMap = {\n      [Currency.ILS]: '₪',\n      [Currency.USD]: '$',\n      [Currency.EUR]: '€',\n      [Currency.GBP]: '£',\n      [Currency.BTC]: '₿',\n      [Currency.ETH]: 'Ξ',\n    };\n    \n    return `${currencySymbolMap[currency]}${amount.toLocaleString()}`;\n  }, []);\n\n  const getCountryFlag = useCallback((country: string): string => {\n    const flagMap: Record<string, string> = {\n      israel: '🇮🇱',\n      usa: '🇺🇸',\n      uk: '🇬🇧',\n      germany: '🇩🇪',\n      france: '🇫🇷',\n      canada: '🇨🇦',\n      australia: '🇦🇺',\n      netherlands: '🇳🇱',\n      sweden: '🇸🇪',\n      norway: '🇳🇴',\n    };\n    \n    return flagMap[country.toLowerCase()] || '🌍';\n  }, []);\n\n  const formatCountryName = useCallback((country: string): string => {\n    return country.charAt(0).toUpperCase() + country.slice(1);\n  }, []);\n\n  return (\n    <div className={`tax-calculator-demo ${className}`}>\n      <div className=\"professional-card\">\n        <h2 className=\"section-title\">\n          🏛️ Pre-Tax Salary Calculator\n        </h2>\n        <p className=\"text-gray-600 mb-6\">\n          Enter your gross salary to see the accurate take-home amount after taxes and social insurance contributions.\n        </p>\n\n        {/* Input Controls */}\n        <div className=\"input-grid mb-6\">\n          <div className=\"input-group\">\n            <label htmlFor=\"gross-salary\">\n              Gross Salary ({isAnnual ? 'Annual' : 'Monthly'})\n            </label>\n            <input\n              id=\"gross-salary\"\n              type=\"number\"\n              value={grossSalary}\n              onChange={handleSalaryChange}\n              min=\"0\"\n              step=\"1000\"\n            />\n          </div>\n\n          <div className=\"input-group\">\n            <label htmlFor=\"country-select\">Country</label>\n            <select\n              id=\"country-select\"\n              value={selectedCountry}\n              onChange={handleCountryChange}\n            >\n              {availableCountries.map(country => (\n                <option key={country} value={country}>\n                  {getCountryFlag(country)} {formatCountryName(country)}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"input-group\">\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={isAnnual}\n                onChange={handleSalaryTypeChange}\n                className=\"mr-2\"\n              />\n              Annual Salary (uncheck for monthly)\n            </label>\n          </div>\n        </div>\n\n        {/* Results Display */}\n        {taxResult && (\n          <div className=\"tax-results\">\n            {/* Summary Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n              <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n                <div className=\"text-sm text-blue-600 font-medium\">Gross Salary</div>\n                <div className=\"text-2xl font-bold text-blue-900\">\n                  {formatCurrency(taxResult.grossSalary, selectedCountry)}\n                </div>\n              </div>\n\n              <div className=\"bg-red-50 p-4 rounded-lg border border-red-200\">\n                <div className=\"text-sm text-red-600 font-medium\">Total Tax</div>\n                <div className=\"text-2xl font-bold text-red-900\">\n                  {formatCurrency(taxResult.totalTax, selectedCountry)}\n                </div>\n                <div className=\"text-sm text-red-600\">\n                  ({taxResult.effectiveTaxRate.toFixed(1)}% effective rate)\n                </div>\n              </div>\n\n              <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n                <div className=\"text-sm text-green-600 font-medium\">Net Salary</div>\n                <div className=\"text-2xl font-bold text-green-900\">\n                  {formatCurrency(taxResult.netSalary, selectedCountry)}\n                </div>\n                <div className=\"text-sm text-green-600\">Take-home pay</div>\n              </div>\n            </div>\n\n            {/* Detailed Breakdown */}\n            {detailedResult && (\n              <div className=\"detailed-breakdown\">\n                <h3 className=\"text-lg font-semibold mb-4\">Tax Breakdown</h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {/* Tax Brackets */}\n                  <div className=\"breakdown-section\">\n                    <h4 className=\"font-medium text-gray-700 mb-3\">Income Tax Brackets</h4>\n                    <div className=\"space-y-2\">\n                      {detailedResult.breakdown.taxBracketDetails.map((bracket, index) => (\n                        <div key={index} className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">\n                            {formatCurrency(bracket.min, selectedCountry)} - \n                            {bracket.max ? formatCurrency(bracket.max, selectedCountry) : '∞'} \n                            ({bracket.rate}%)\n                          </span>\n                          <span className=\"font-medium\">\n                            {formatCurrency(bracket.taxAmount, selectedCountry)}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Social Insurance */}\n                  <div className=\"breakdown-section\">\n                    <h4 className=\"font-medium text-gray-700 mb-3\">Social Insurance</h4>\n                    <div className=\"space-y-2\">\n                      {detailedResult.breakdown.socialInsuranceDetails.map((insurance, index) => (\n                        <div key={index} className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">\n                            {insurance.description} ({insurance.rate}%)\n                          </span>\n                          <span className=\"font-medium\">\n                            {formatCurrency(insurance.amount, selectedCountry)}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Deductions */}\n                {detailedResult.breakdown.deductions.length > 0 && (\n                  <div className=\"mt-6\">\n                    <h4 className=\"font-medium text-gray-700 mb-3\">Deductions & Allowances</h4>\n                    <div className=\"space-y-2\">\n                      {detailedResult.breakdown.deductions.map((deduction, index) => (\n                        <div key={index} className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">{deduction.description}</span>\n                          <span className=\"font-medium\">\n                            {formatCurrency(deduction.amount, selectedCountry)}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Summary Stats */}\n                <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n                    <div>\n                      <div className=\"text-sm text-gray-600\">Taxable Income</div>\n                      <div className=\"font-semibold\">\n                        {formatCurrency(detailedResult.taxableIncome, selectedCountry)}\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-gray-600\">Income Tax</div>\n                      <div className=\"font-semibold\">\n                        {formatCurrency(detailedResult.incomeTax, selectedCountry)}\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-gray-600\">Social Insurance</div>\n                      <div className=\"font-semibold\">\n                        {formatCurrency(detailedResult.socialInsuranceTax, selectedCountry)}\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-gray-600\">Marginal Rate</div>\n                      <div className=\"font-semibold\">{detailedResult.marginalTaxRate.toFixed(1)}%</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Info Note */}\n        <div className=\"mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n          <p className=\"text-sm text-blue-800\">\n            <strong>Note:</strong> Tax calculations are based on 2024 tax rules and use standard deductions. \n            Actual taxes may vary based on personal circumstances, additional deductions, and local regulations. \n            This calculator provides estimates for retirement planning purposes.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TaxCalculatorDemo;","// Main Application Component - TypeScript Implementation\n// Created by Yali Pollak (יהלי פולק) - v6.0.0-beta.1\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Language, \n  Currency,\n  PlanningType,\n  RiskTolerance,\n  type BasicInputs,\n  type FinancialResults,\n} from '@/types';\nimport { Dashboard } from '@/components/Dashboard';\nimport TaxCalculatorDemo from '@/components/TaxCalculatorDemo';\nimport { calculateRetirement, formatCurrency } from '@/utils/retirementCalculations';\n\nconst App: React.FC = () => {\n  // Application state\n  const [language, setLanguage] = useState<Language>(Language.EN);\n  const [workingCurrency, setWorkingCurrency] = useState<Currency>(Currency.ILS);\n  const [inputs, setInputs] = useState<BasicInputs>({\n    currentAge: 30,\n    retirementAge: 67,\n    currentSalary: 15000,\n    currentSavings: 100000,\n    monthlyContribution: 2000,\n    currentMonthlyExpenses: 10000,\n    targetReplacement: 75,\n    riskTolerance: RiskTolerance.MODERATE,\n    planningType: PlanningType.INDIVIDUAL,\n    workingCurrency: Currency.ILS,\n  });\n  const [results, setResults] = useState<FinancialResults | null>(null);\n\n  // Calculate results when inputs change\n  useEffect(() => {\n    const calculateResults = (): void => {\n      try {\n        // Mock work periods for demo\n        const workPeriods = [\n          {\n            id: 1,\n            country: 'israel',\n            startAge: inputs.currentAge,\n            endAge: inputs.retirementAge,\n            monthlyContribution: inputs.monthlyContribution,\n            salary: inputs.currentSalary,\n            pensionReturn: 7.0,\n            pensionDepositFee: 0.5,\n            pensionAnnualFee: 1.0,\n            monthlyTrainingFund: 500,\n          },\n        ];\n\n        // Mock allocations\n        const pensionIndexAllocation = [\n          { index: 0, percentage: 60, customReturn: null },\n          { index: 1, percentage: 40, customReturn: null },\n        ];\n\n        const trainingFundIndexAllocation = [\n          { index: 0, percentage: 100, customReturn: null },\n        ];\n\n        // Mock historical returns\n        const historicalReturns = {\n          5: [5, 6],\n          10: [6, 7],\n          15: [7, 8],\n          20: [7.5, 8.5],\n          25: [8, 9],\n          30: [8.5, 9.5],\n        };\n\n        const monthlyTrainingFundContribution = 500;\n\n        const calculationResults = calculateRetirement(\n          inputs,\n          workPeriods,\n          pensionIndexAllocation,\n          trainingFundIndexAllocation,\n          historicalReturns,\n          monthlyTrainingFundContribution\n        );\n\n        setResults(calculationResults);\n      } catch (error) {\n        console.error('Calculation error:', error);\n        // Set default results in case of error\n        setResults({\n          totalSavings: 0,\n          monthlyPension: 0,\n          replacementRatio: 0,\n          shortfall: 0,\n          projectedNetWorth: 0,\n          yearlyBreakdown: [],\n          readinessScore: 0,\n          recommendations: ['Please check your inputs'],\n        });\n      }\n    };\n\n    calculateResults();\n  }, [inputs]);\n\n  // Format currency function\n  const handleFormatCurrency = (amount: number): string => {\n    return formatCurrency(amount, workingCurrency, language);\n  };\n\n  // Handle section expansion\n  const handleSectionExpand = (sectionId: string, expanded: boolean): void => {\n    console.log(`Section ${sectionId} ${expanded ? 'expanded' : 'collapsed'}`);\n  };\n\n  return (\n    <div className=\"app-container\">\n      {/* Version indicator */}\n      <div className=\"version-indicator\">\n        ✨ v6.0.0-beta.1 (TypeScript)\n      </div>\n\n      {/* Language Toggle */}\n      <div className=\"language-toggle\">\n        <button\n          onClick={() => setLanguage(language === Language.EN ? Language.HE : Language.EN)}\n          className=\"btn-secondary\"\n        >\n          {language === Language.EN ? 'עברית' : 'English'}\n        </button>\n      </div>\n\n      {/* Currency Toggle */}\n      <div className=\"currency-toggle\">\n        <select\n          value={workingCurrency}\n          onChange={(e) => setWorkingCurrency(e.target.value as Currency)}\n          className=\"currency-select\"\n        >\n          <option value={Currency.ILS}>₪ ILS</option>\n          <option value={Currency.USD}>$ USD</option>\n          <option value={Currency.EUR}>€ EUR</option>\n          <option value={Currency.GBP}>£ GBP</option>\n          <option value={Currency.BTC}>₿ BTC</option>\n          <option value={Currency.ETH}>Ξ ETH</option>\n        </select>\n      </div>\n\n      {/* Main Content */}\n      <main className=\"main-content\">\n        <header className=\"app-header\">\n          <h1 className=\"app-title\">\n            {language === Language.HE \n              ? 'מתכנן הפרישה המתקדם - גרסת TypeScript' \n              : 'Advanced Retirement Planner - TypeScript Version'\n            }\n          </h1>\n          <p className=\"app-subtitle\">\n            {language === Language.HE\n              ? 'גרסה חדשה עם בטיחות טיפוסים משופרת וביצועים טובים יותר'\n              : 'Next-generation version with enhanced type safety and improved performance'\n            }\n          </p>\n        </header>\n\n        {/* Demo Input Controls */}\n        <section className=\"demo-controls\">\n          <h2>\n            {language === Language.HE ? 'בקרות הדגמה' : 'Demo Controls'}\n          </h2>\n          <div className=\"input-grid\">\n            <div className=\"input-group\">\n              <label htmlFor=\"currentAge\">\n                {language === Language.HE ? 'גיל נוכחי' : 'Current Age'}\n              </label>\n              <input\n                id=\"currentAge\"\n                type=\"number\"\n                value={inputs.currentAge}\n                onChange={(e) => setInputs(prev => ({ \n                  ...prev, \n                  currentAge: parseInt(e.target.value) || 30 \n                }))}\n                min=\"18\"\n                max=\"100\"\n              />\n            </div>\n\n            <div className=\"input-group\">\n              <label htmlFor=\"retirementAge\">\n                {language === Language.HE ? 'גיל פרישה' : 'Retirement Age'}\n              </label>\n              <input\n                id=\"retirementAge\"\n                type=\"number\"\n                value={inputs.retirementAge}\n                onChange={(e) => setInputs(prev => ({ \n                  ...prev, \n                  retirementAge: parseInt(e.target.value) || 67 \n                }))}\n                min=\"50\"\n                max=\"100\"\n              />\n            </div>\n\n            <div className=\"input-group\">\n              <label htmlFor=\"currentSalary\">\n                {language === Language.HE ? 'משכורת נוכחית' : 'Current Salary'}\n              </label>\n              <input\n                id=\"currentSalary\"\n                type=\"number\"\n                value={inputs.currentSalary}\n                onChange={(e) => setInputs(prev => ({ \n                  ...prev, \n                  currentSalary: parseInt(e.target.value) || 15000 \n                }))}\n                min=\"0\"\n              />\n            </div>\n\n            <div className=\"input-group\">\n              <label htmlFor=\"monthlyContribution\">\n                {language === Language.HE ? 'הפקדה חודשית' : 'Monthly Contribution'}\n              </label>\n              <input\n                id=\"monthlyContribution\"\n                type=\"number\"\n                value={inputs.monthlyContribution}\n                onChange={(e) => setInputs(prev => ({ \n                  ...prev, \n                  monthlyContribution: parseInt(e.target.value) || 2000 \n                }))}\n                min=\"0\"\n              />\n            </div>\n          </div>\n        </section>\n\n        {/* Tax Calculator Demo */}\n        <TaxCalculatorDemo />\n\n        {/* Dashboard */}\n        {results && (\n          <Dashboard\n            inputs={inputs}\n            results={results}\n            language={language}\n            formatCurrency={handleFormatCurrency}\n            onSectionExpand={handleSectionExpand}\n            workingCurrency={workingCurrency}\n          />\n        )}\n\n        {/* TypeScript Features Demo */}\n        <section className=\"typescript-demo\">\n          <h2>\n            {language === Language.HE ? 'תכונות TypeScript' : 'TypeScript Features'}\n          </h2>\n          <div className=\"feature-list\">\n            <div className=\"feature-item\">\n              <h3>🔒 Type Safety</h3>\n              <p>\n                {language === Language.HE \n                  ? 'בדיקת טיפוסים מלאה בזמן קומפילציה'\n                  : 'Full type checking at compile time'\n                }\n              </p>\n            </div>\n            <div className=\"feature-item\">\n              <h3>⚡ Performance</h3>\n              <p>\n                {language === Language.HE \n                  ? 'בילד מותאם וזמני טעינה מהירים יותר'\n                  : 'Optimized builds and faster load times'\n                }\n              </p>\n            </div>\n            <div className=\"feature-item\">\n              <h3>🛠️ Developer Experience</h3>\n              <p>\n                {language === Language.HE \n                  ? 'השלמה אוטומטית וכלי פיתוח משופרים'\n                  : 'Auto-completion and enhanced tooling'\n                }\n              </p>\n            </div>\n            <div className=\"feature-item\">\n              <h3>🧪 Testing</h3>\n              <p>\n                {language === Language.HE \n                  ? 'מסגרת בדיקות מתקדמת עם Vitest'\n                  : 'Advanced testing framework with Vitest'\n                }\n              </p>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"app-footer\">\n        <p>\n          {language === Language.HE \n            ? 'מתכנן הפרישה המתקדם - גרסת TypeScript'\n            : 'Advanced Retirement Planner - TypeScript Version'\n          } v6.0.0-beta.1\n        </p>\n        <p>\n          {language === Language.HE \n            ? 'נוצר על ידי יהלי פולק'\n            : 'Created by Yali Pollak (יהלי פולק)'\n          }\n        </p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;","// Main Entry Point - TypeScript Implementation\n// Created by Yali Pollak (יהלי פולק) - v6.0.0-beta.1\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './styles/main.css';\n\n// Initialize the application\nconst container = document.getElementById('root');\nif (!container) {\n  throw new Error('Root container not found');\n}\n\nconst root = ReactDOM.createRoot(container);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\nconsole.log('🚀 Advanced Retirement Planner TypeScript v6.0.0-beta.1 initialized successfully');"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","client","Currency","Language","RiskTolerance","PlanningType","Country","TaxBracketType","DeductionType","SocialInsuranceType","CurrencySchema","z.nativeEnum","RiskToleranceSchema","PlanningTypeSchema","BasicInputsSchema","z.object","z.number","ValidationError","message","field","value","CalculationError","context","TaxCalculationError","country","grossSalary","CurrencyAPI","__publicField","data","rates","typedData","_a","_b","_c","endpoint","controller","timeoutId","response","error","errorMessage","cachedRates","currency","rate","fromCurrency","toCurrency","fromRate","amount","CurrencyConversionError","convertedAmount","language","symbol","locale","formatter","currencyAPI","from","to","TRANSLATIONS","Dashboard","inputs","results","formatCurrency","onSectionExpand","workingCurrency","exchangeRates","setExchangeRates","useState","selectedCurrency","setSelectedCurrency","expandedSections","setExpandedSections","t","useEffect","healthScore","useCallback","currentAge","yearsToRetirement","currentSavings","score","annualSavings","annualIncome","savingsRate","recommendedSavings","savingsAdequacy","timeScore","riskScore","hasPersonalPortfolio","hasRealEstate","healthStatus","netWorth","baseNetWorth","formatSelectedCurrency","toggleSection","sectionId","prev","radius","circumference","strokeDasharray","strokeDashoffset","jsxs","jsx","TaxCalculator","isAnnual","taxRule","annualGrossSalary","totalDeductions","taxableIncome","incomeTax","socialInsuranceTax","totalTax","netSalary","effectiveTaxRate","marginalTaxRate","breakdown","total","deduction","remainingIncome","bracket","bracketMin","bracketMax","incomeInBracket","taxInBracket","insurance","applicableIncome","employeeRate","deductions","taxBracketDetails","taxAmount","socialInsuranceDetails","taxCalculator","RISK_SCENARIOS","COUNTRY_DATA","convertCurrency","getNetReturn","grossReturn","managementFee","calculateWeightedReturn","allocations","timeHorizon","historicalReturns","totalReturn","totalPercentage","closestTimeHorizon","curr","allocation","returnRate","getAdjustedReturn","baseReturn","riskLevel","riskMultiplier","validateInputs","calculateRetirement","workPeriods","pensionIndexAllocation","trainingFundIndexAllocation","monthlyTrainingFundContribution","partnerWorkPeriods","basePensionWeightedReturn","baseTrainingFundWeightedReturn","pensionWeightedReturn","trainingFundWeightedReturn","totalPensionSavings","currentTrainingFund","currentPersonalPortfolio","currentCrypto","currentRealEstate","totalTrainingFund","totalPersonalPortfolio","totalCrypto","totalRealEstate","periodResults","sortedPeriods","period","periodYears","adjustedPensionReturn","effectiveReturn","monthlyReturn","periodMonths","existingGrowth","netMonthlyContribution","contributionsValue","newTotal","trainingFundReturn","trainingFundManagementFee","trainingFundNetReturn","personalPortfolioReturn","personalPortfolioMonthly","personalPortfolioMonthlyReturn","personalPortfolioMonths","personalPortfolioGrowth","personalPortfolioContributions","cryptoReturn","cryptoMonthly","cryptoMonthlyReturn","cryptoMonths","cryptoGrowth","cryptoContributions","realEstateReturn","realEstateMonthly","realEstateMonthlyReturn","realEstateMonths","realEstateGrowth","realEstateContributions","totalSavings","monthlyPension","finalSalary","replacementRatio","targetIncome","shortfall","yearlyBreakdown","year","age","yearlyContribution","balance","readinessScore","recommendations","generateChartData","chartView","partnerResults","chartData","retirementAge","inflationRate","yearsElapsed","inflationDivisor","dataPoint","validatePartnerData","partnerData","calculateNetSalaryFromGross","countryEnum","countryValue","estimatedTaxRate","result","getAvailableTaxCountries","isTaxCalculationSupported","TaxCalculatorDemo","className","setGrossSalary","selectedCountry","setSelectedCountry","setIsAnnual","availableCountries","useMemo","taxResult","detailedResult","handleSalaryChange","handleCountryChange","handleSalaryTypeChange","getCountryFlag","formatCountryName","index","App","setLanguage","setWorkingCurrency","setInputs","setResults","calculationResults","handleFormatCurrency","handleSectionExpand","expanded","container","root","ReactDOM","React"],"mappings":"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","x_google_ignoreList":[0,1,2]}
{
  "timestamp": "2025-07-23T20:00:15.729Z",
  "totalIssues": 21,
  "overallSeverity": "HIGH",
  "criticalErrors": [],
  "runtimeErrors": [
    {
      "type": "Console Error",
      "file": "src/app.js",
      "line": 296,
      "match": "console.error('Application error:'",
      "context": "console.error('Application error:', event.error);"
    },
    {
      "type": "Console Error",
      "file": "src/app.js",
      "line": 344,
      "match": "console.error('Error initializing app:'",
      "context": "console.error('Error initializing app:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/analysis/ClaudeRecommendations.js",
      "line": 300,
      "match": "console.error('Failed to copy: '",
      "context": "console.error('Failed to copy: ', err);"
    },
    {
      "type": "Console Error",
      "file": "src/components/analysis/MonteCarloResultsDashboard.js",
      "line": 125,
      "match": "console.error('Monte Carlo simulation not available'",
      "context": "console.error('Monte Carlo simulation not available');"
    },
    {
      "type": "Console Error",
      "file": "src/components/analysis/MonteCarloResultsDashboard.js",
      "line": 145,
      "match": "console.error('Monte Carlo simulation failed:'",
      "context": "console.error('Monte Carlo simulation failed:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/analysis/StressTestInterface.js",
      "line": 146,
      "match": "console.error('Claude translation failed:'",
      "context": "console.error('Claude translation failed:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/analysis/WithdrawalStrategyInterface.js",
      "line": 159,
      "match": "console.error('Withdrawal strategies not available'",
      "context": "console.error('Withdrawal strategies not available');"
    },
    {
      "type": "Console Error",
      "file": "src/components/analysis/WithdrawalStrategyInterface.js",
      "line": 182,
      "match": "console.error('Withdrawal analysis failed:'",
      "context": "console.error('Withdrawal analysis failed:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/charts/FinancialChart.js",
      "line": 33,
      "match": "console.error('FinancialChart: Data validation failed. Cannot render chart.'",
      "context": "console.error('FinancialChart: Data validation failed. Cannot render chart.');"
    },
    {
      "type": "Console Error",
      "file": "src/components/charts/FinancialChart.js",
      "line": 38,
      "match": "console.error('FinancialChart: An unexpected error occurred during chart rendering:'",
      "context": "console.error('FinancialChart: An unexpected error occurred during chart rendering:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/core/LazyComponent.js",
      "line": 35,
      "match": "console.error(`Failed to load component ${componentName}:`",
      "context": "console.error(`Failed to load component ${componentName}:`, err);"
    },
    {
      "type": "Console Error",
      "file": "src/components/core/LazyComponent.js",
      "line": 130,
      "match": "console.error(`Failed to load ${stepName}:`",
      "context": "console.error(`Failed to load ${stepName}:`, error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/core/RetirementPlannerApp.js",
      "line": 360,
      "match": "console.error('CurrencyValue formatting error:'",
      "context": "console.error('CurrencyValue formatting error:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/core/RetirementPlannerApp.js",
      "line": 559,
      "match": "console.error('Calculate error:'",
      "context": "console.error('Calculate error:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/core/RetirementPlannerApp.js",
      "line": 771,
      "match": "console.error('Optimization error:'",
      "context": "console.error('Optimization error:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/core/RetirementPlannerApp.js",
      "line": 910,
      "match": "console.error('Export error:'",
      "context": "console.error('Export error:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/forms/SecureInput.js",
      "line": 69,
      "match": "console.error('Validation error:'",
      "context": "console.error('Validation error:', err);"
    },
    {
      "type": "Console Error",
      "file": "src/components/panels/RetirementResultsPanel.js",
      "line": 81,
      "match": "console.error('Currency conversion error:'",
      "context": "console.error('Currency conversion error:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/panels/RetirementResultsPanel.js",
      "line": 109,
      "match": "console.error('RetirementResultsPanel: Error formatting value:'",
      "context": "console.error('RetirementResultsPanel: Error formatting value:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/panels/RetirementResultsPanel.js",
      "line": 338,
      "match": "console.error('CurrencyValue formatting error:'",
      "context": "console.error('CurrencyValue formatting error:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/panels/analysis/InflationVisualizationPanel.js",
      "line": 116,
      "match": "console.error('Error analyzing inflation impact:'",
      "context": "console.error('Error analyzing inflation impact:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/panels/analysis/PortfolioOptimizationPanel.js",
      "line": 158,
      "match": "console.error('Optimization error:'",
      "context": "console.error('Optimization error:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/panels/settings/AdvancedRebalancingPanel.js",
      "line": 180,
      "match": "console.error('Error analyzing rebalancing needs:'",
      "context": "console.error('Error analyzing rebalancing needs:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/panels/settings/AdvancedSettingsPanel.js",
      "line": 216,
      "match": "console.error('Failed to save settings:'",
      "context": "console.error('Failed to save settings:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/panels/summary/SavingsSummaryPanel.js",
      "line": 24,
      "match": "console.error('Failed to load currency rates:'",
      "context": "console.error('Failed to load currency rates:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/scenarios/ScenarioComparison.js",
      "line": 221,
      "match": "console.error('Error calculating scenario results:'",
      "context": "console.error('Error calculating scenario results:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/scenarios/ScenarioEditor.js",
      "line": 148,
      "match": "console.error('Error calculating preview:'",
      "context": "console.error('Error calculating preview:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/shared/CryptoPortfolioInput.js",
      "line": 100,
      "match": "console.error('Failed to fetch digital asset prices:'",
      "context": "console.error('Failed to fetch digital asset prices:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/shared/CurrencySelector.js",
      "line": 74,
      "match": "console.error('Failed to load exchange rates:'",
      "context": "console.error('Failed to load exchange rates:', err);"
    },
    {
      "type": "Thrown Error",
      "file": "src/components/shared/EnhancedRSUCompanySelector.js",
      "line": 128,
      "match": "throw new Error('Price not available'",
      "context": "throw new Error('Price not available');"
    },
    {
      "type": "Console Error",
      "file": "src/components/shared/ErrorBoundary.js",
      "line": 13,
      "match": "console.error('ErrorBoundary caught unhandled error:'",
      "context": "console.error('ErrorBoundary caught unhandled error:', event.error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/shared/ErrorBoundary.js",
      "line": 23,
      "match": "console.error('ErrorBoundary caught unhandled promise rejection:'",
      "context": "console.error('ErrorBoundary caught unhandled promise rejection:', event.reason);"
    },
    {
      "type": "Console Error",
      "file": "src/components/shared/ErrorBoundary.js",
      "line": 66,
      "match": "console.error('Error reported:'",
      "context": "console.error('Error reported:', errorData);"
    },
    {
      "type": "Console Error",
      "file": "src/components/shared/ExportControls.js",
      "line": 88,
      "match": "console.error(`❌ ${format.toUpperCase()} export failed:`",
      "context": "console.error(`❌ ${format.toUpperCase()} export failed:`, error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/shared/ExportControls.js",
      "line": 118,
      "match": "console.error('❌ LLM export failed:'",
      "context": "console.error('❌ LLM export failed:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/shared/ExportControls.js",
      "line": 147,
      "match": "console.error('❌ Claude prompt copy failed:'",
      "context": "console.error('❌ Claude prompt copy failed:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/shared/MultiCurrencySavings.js",
      "line": 75,
      "match": "console.error('MultiCurrencySavings: Error loading rates:'",
      "context": "console.error('MultiCurrencySavings: Error loading rates:', err);"
    },
    {
      "type": "Console Error",
      "file": "src/components/validation/CoupleValidationPanel.js",
      "line": 176,
      "match": "console.error('Validation error:'",
      "context": "console.error('Validation error:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/wizard/RetirementWizard.js",
      "line": 68,
      "match": "console.error('Failed to save wizard progress:'",
      "context": "console.error('Failed to save wizard progress:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/wizard/RetirementWizard.js",
      "line": 98,
      "match": "console.error('Failed to clear saved progress:'",
      "context": "console.error('Failed to clear saved progress:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/components/wizard/steps/WizardStepSavings.js",
      "line": 98,
      "match": "console.error('Error calculating total savings:'",
      "context": "console.error('Error calculating total savings:', error);"
    },
    {
      "type": "Thrown Error",
      "file": "src/utils/cryptoPriceAPI.js",
      "line": 81,
      "match": "throw new Error(`HTTP error! status: ${response.status}`",
      "context": "throw new Error(`HTTP error! status: ${response.status}`);"
    },
    {
      "type": "Thrown Error",
      "file": "src/utils/currencyAPI.js",
      "line": 83,
      "match": "throw new Error(`HTTP ${response.status}: ${response.statusText}`",
      "context": "throw new Error(`HTTP ${response.status}: ${response.statusText}`);"
    },
    {
      "type": "Thrown Error",
      "file": "src/utils/currencyAPI.js",
      "line": 122,
      "match": "throw new Error(`HTTP ${response.status}: ${response.statusText}`",
      "context": "throw new Error(`HTTP ${response.status}: ${response.statusText}`);"
    },
    {
      "type": "Console Error",
      "file": "src/utils/currencyExchange.js",
      "line": 34,
      "match": "console.error('Error fetching fiat rates:'",
      "context": "console.error('Error fetching fiat rates:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/utils/currencyExchange.js",
      "line": 62,
      "match": "console.error('Error fetching crypto rates:'",
      "context": "console.error('Error fetching crypto rates:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/utils/currencyExchange.js",
      "line": 95,
      "match": "console.error('Error fetching all rates:'",
      "context": "console.error('Error fetching all rates:', error);"
    },
    {
      "type": "Thrown Error",
      "file": "src/utils/currencyExchange.js",
      "line": 20,
      "match": "throw new Error(`HTTP error! status: ${response.status}`",
      "context": "throw new Error(`HTTP error! status: ${response.status}`);"
    },
    {
      "type": "Thrown Error",
      "file": "src/utils/currencyExchange.js",
      "line": 48,
      "match": "throw new Error(`HTTP error! status: ${response.status}`",
      "context": "throw new Error(`HTTP error! status: ${response.status}`);"
    },
    {
      "type": "Console Error",
      "file": "src/utils/dynamicLoader.js",
      "line": 114,
      "match": "console.error(`❌ Failed to load component: ${componentName}`",
      "context": "console.error(`❌ Failed to load component: ${componentName}`, error);"
    },
    {
      "type": "Console Error",
      "file": "src/utils/dynamicLoader.js",
      "line": 202,
      "match": "console.error('Batch loading error:'",
      "context": "console.error('Batch loading error:', error);"
    },
    {
      "type": "Thrown Error",
      "file": "src/utils/dynamicLoader.js",
      "line": 80,
      "match": "throw new Error(`Unknown component: ${componentName}`",
      "context": "throw new Error(`Unknown component: ${componentName}`);"
    },
    {
      "type": "Console Error",
      "file": "src/utils/exportFunctions.js",
      "line": 44,
      "match": "console.error('❌ Export as image failed:'",
      "context": "console.error('❌ Export as image failed:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/utils/exportFunctions.js",
      "line": 64,
      "match": "console.error('❌ PNG export failed:'",
      "context": "console.error('❌ PNG export failed:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/utils/exportFunctions.js",
      "line": 96,
      "match": "console.error('❌ PDF export failed:'",
      "context": "console.error('❌ PDF export failed:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/utils/exportFunctions.js",
      "line": 195,
      "match": "console.error('❌ LLM analysis export failed:'",
      "context": "console.error('❌ LLM analysis export failed:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/utils/exportFunctions.js",
      "line": 264,
      "match": "console.error('❌ Failed to copy Claude prompt:'",
      "context": "console.error('❌ Failed to copy Claude prompt:', error);"
    },
    {
      "type": "Thrown Error",
      "file": "src/utils/exportFunctions.js",
      "line": 15,
      "match": "throw new Error('No content container found'",
      "context": "throw new Error('No content container found');"
    },
    {
      "type": "Console Error",
      "file": "src/utils/financialHealthEngine.js",
      "line": 591,
      "match": "console.error('❌ Error calculating financial health score:'",
      "context": "console.error('❌ Error calculating financial health score:', error);"
    },
    {
      "type": "Property Access Error",
      "file": "src/utils/financialHealthEngine.js",
      "line": 476,
      "match": "Cannot read properties of undefined",
      "context": "// CRITICAL FIX: Add null safety checks to prevent \"Cannot read properties of undefined (reading 'status')\" error"
    },
    {
      "type": "Console Error",
      "file": "src/utils/goalSuggestionEngine.js",
      "line": 256,
      "match": "console.error('❌ Error generating goal suggestions:'",
      "context": "console.error('❌ Error generating goal suggestions:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/utils/inputValidation.js",
      "line": 300,
      "match": "console.error(`Unknown validator type: ${fieldSchema.type}`",
      "context": "console.error(`Unknown validator type: ${fieldSchema.type}`);"
    },
    {
      "type": "Console Error",
      "file": "src/utils/rsuCalculations.js",
      "line": 80,
      "match": "console.error(`Error fetching price for ${symbol}:`",
      "context": "console.error(`Error fetching price for ${symbol}:`, error);"
    },
    {
      "type": "Console Error",
      "file": "src/utils/stockPriceAPI.js",
      "line": 348,
      "match": "console.error('Error fetching multiple stock prices:'",
      "context": "console.error('Error fetching multiple stock prices:', error);"
    },
    {
      "type": "Console Error",
      "file": "src/utils/stressTestLogic.js",
      "line": 7,
      "match": "console.error('Invalid scenario type'",
      "context": "console.error('Invalid scenario type');"
    },
    {
      "type": "Console Error",
      "file": "src/utils/stressTestLogic.js",
      "line": 55,
      "match": "console.error('Unknown scenario type:'",
      "context": "console.error('Unknown scenario type:', scenarioType);"
    },
    {
      "type": "Console Error",
      "file": "src/utils/stressTestScenarios.js",
      "line": 130,
      "match": "console.error('calculateRetirement function not available'",
      "context": "console.error('calculateRetirement function not available');"
    }
  ],
  "initializationErrors": [],
  "scopeIssues": [],
  "undefinedPropertyErrors": [
    {
      "type": "Undefined Property Access",
      "error": "Cannot read properties of undefined (reading 'status')",
      "locations": [
        {
          "file": "src/utils/financialHealthEngine.js",
          "line": 155,
          "pattern": "status: status",
          "context": "status: status,"
        },
        {
          "file": "src/utils/financialHealthEngine.js",
          "line": 207,
          "pattern": "status: status",
          "context": "status: status"
        },
        {
          "file": "src/utils/financialHealthEngine.js",
          "line": 245,
          "pattern": "status: status",
          "context": "status: status"
        },
        {
          "file": "src/utils/financialHealthEngine.js",
          "line": 285,
          "pattern": "status: status",
          "context": "status: status"
        },
        {
          "file": "src/utils/financialHealthEngine.js",
          "line": 328,
          "pattern": "status: status",
          "context": "status: status,"
        },
        {
          "file": "src/utils/financialHealthEngine.js",
          "line": 374,
          "pattern": "status: status",
          "context": "status: status"
        },
        {
          "file": "src/utils/financialHealthEngine.js",
          "line": 418,
          "pattern": "status: status",
          "context": "status: status"
        },
        {
          "file": "src/utils/financialHealthEngine.js",
          "line": 460,
          "pattern": "status: status",
          "context": "status: status"
        }
      ],
      "rootCause": "Accessing .status property on potentially undefined factorData.details objects",
      "severity": "HIGH",
      "impact": "Financial health meter component may crash when calculations fail",
      "fix": {
        "description": "Add null checks and fallback values for status property access",
        "implementation": "\n// PROBLEMATIC PATTERNS:\nfactorData.details.status === 'excellent'  // ❌ May crash if details is undefined\ngetStatusColor(status)  // ❌ May crash if status is undefined\n\n// FIXED VERSION:\nconst status = factorData?.details?.status || 'unknown';\nif (status !== 'unknown') {\n    getStatusColor(status);\n}\n\n// OR with fallback:\nconst safeStatus = factorData?.details?.status ?? 'critical';\ngetStatusColor(safeStatus);\n                "
      }
    }
  ],
  "memoryLeaks": [
    {
      "file": "src/components/analysis/MonteCarloResultsDashboard.js",
      "line": 133,
      "type": "Potential Memory Leak",
      "description": "setTimeout without clearTimeout cleanup",
      "context": "setTimeout(() => {"
    },
    {
      "file": "src/components/analysis/StressTestInterface.js",
      "line": 158,
      "type": "Potential Memory Leak",
      "description": "setTimeout without clearTimeout cleanup",
      "context": "setTimeout(() => {"
    },
    {
      "file": "src/components/analysis/WithdrawalStrategyInterface.js",
      "line": 169,
      "type": "Potential Memory Leak",
      "description": "setTimeout without clearTimeout cleanup",
      "context": "await new Promise(resolve => setTimeout(resolve, 50));"
    },
    {
      "file": "src/components/panels/analysis/PortfolioOptimizationPanel.js",
      "line": 153,
      "type": "Potential Memory Leak",
      "description": "setTimeout without clearTimeout cleanup",
      "context": "await new Promise(resolve => setTimeout(resolve, 1000));"
    },
    {
      "file": "src/components/shared/ExportControls.js",
      "line": 92,
      "type": "Potential Memory Leak",
      "description": "setTimeout without clearTimeout cleanup",
      "context": "setTimeout(() => setExportStatus(null), 3000);"
    },
    {
      "file": "src/components/shared/ExportControls.js",
      "line": 121,
      "type": "Potential Memory Leak",
      "description": "setTimeout without clearTimeout cleanup",
      "context": "setTimeout(() => setExportStatus(null), 3000);"
    },
    {
      "file": "src/components/shared/ExportControls.js",
      "line": 150,
      "type": "Potential Memory Leak",
      "description": "setTimeout without clearTimeout cleanup",
      "context": "setTimeout(() => setExportStatus(null), 3000);"
    },
    {
      "file": "src/components/validation/CoupleValidationPanel.js",
      "line": 162,
      "type": "Potential Memory Leak",
      "description": "setTimeout without clearTimeout cleanup",
      "context": "await new Promise(resolve => setTimeout(resolve, 500));"
    },
    {
      "file": "src/components/wizard/steps/WizardStepTaxes.js",
      "line": 886,
      "type": "Potential Memory Leak",
      "description": "setTimeout without clearTimeout cleanup",
      "context": "setTimeout(() => {"
    },
    {
      "file": "src/utils/performanceMonitor.js",
      "line": 113,
      "type": "Potential Memory Leak",
      "description": "setInterval without clearInterval cleanup",
      "context": "setInterval(() => {"
    },
    {
      "file": "src/utils/performanceMonitor.js",
      "line": 98,
      "type": "Potential Memory Leak",
      "description": "addEventListener without removeEventListener cleanup",
      "context": "document.addEventListener('visibilitychange', () => {"
    },
    {
      "file": "src/utils/performanceMonitor.js",
      "line": 107,
      "type": "Potential Memory Leak",
      "description": "addEventListener without removeEventListener cleanup",
      "context": "window.addEventListener('beforeunload', () => {"
    },
    {
      "file": "src/utils/performanceMonitor.js",
      "line": 510,
      "type": "Potential Memory Leak",
      "description": "addEventListener without removeEventListener cleanup",
      "context": "window.addEventListener('error', (event) => {"
    },
    {
      "file": "src/utils/performanceMonitor.js",
      "line": 518,
      "type": "Potential Memory Leak",
      "description": "addEventListener without removeEventListener cleanup",
      "context": "window.addEventListener('unhandledrejection', (event) => {"
    },
    {
      "file": "src/utils/stockPriceAPI.js",
      "line": 301,
      "type": "Potential Memory Leak",
      "description": "setTimeout without clearTimeout cleanup",
      "context": "new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 3000))"
    },
    {
      "file": "src/utils/stockPriceAPI.js",
      "line": 172,
      "type": "Potential Memory Leak",
      "description": "addEventListener without removeEventListener cleanup",
      "context": "window.addEventListener('online', () => {"
    },
    {
      "file": "src/utils/stockPriceAPI.js",
      "line": 178,
      "type": "Potential Memory Leak",
      "description": "addEventListener without removeEventListener cleanup",
      "context": "window.addEventListener('offline', () => {"
    }
  ],
  "raceConditions": [
    {
      "file": "src/components/analysis/ClaudeRecommendations.js",
      "line": 225,
      "type": "Potential Race Condition",
      "description": "useEffect with empty dependency array may cause stale closures",
      "context": "React.useEffect(() => {"
    }
  ],
  "errorHandlingGaps": [
    {
      "file": "src/utils/financialHealthEngine.js",
      "score": 50,
      "issues": [
        "Insufficient null checks",
        "No type checking"
      ]
    },
    {
      "file": "src/components/charts/DynamicPartnerCharts.js",
      "score": 50,
      "issues": [
        "No error logging",
        "No type checking"
      ]
    }
  ],
  "recommendations": [
    {
      "priority": "HIGH",
      "category": "Null Safety",
      "action": "Add null checks and fallback values for all status property access",
      "impact": "Prevents financial health meter crashes",
      "effort": "Medium (2 hours)",
      "implementation": "Use optional chaining (?.) and nullish coalescing (??) operators"
    },
    {
      "priority": "MEDIUM",
      "category": "Error Handling",
      "action": "Improve error handling coverage in critical components",
      "impact": "Better user experience and easier debugging",
      "effort": "High (1 day)",
      "implementation": "Add try-catch blocks, null checks, and error logging"
    },
    {
      "priority": "MEDIUM",
      "category": "Memory Management",
      "action": "Add cleanup functions for timers and event listeners",
      "impact": "Prevents memory leaks and improves performance",
      "effort": "Medium (3 hours)",
      "implementation": "Add cleanup in useEffect return functions"
    },
    {
      "priority": "LOW",
      "category": "Monitoring",
      "action": "Implement comprehensive error tracking system",
      "impact": "Proactive error detection and faster issue resolution",
      "effort": "High (2 days)",
      "implementation": "Add error boundaries, logging service, and user feedback system"
    }
  ],
  "fixes": [
    {
      "file": "src/components/charts/DynamicPartnerCharts.js",
      "issue": "Temporal dead zone error in getUnifiedProjectionData",
      "fix": "\n// Replace lines 20-40 with this corrected version:\nconst memoizedChartData = React.useMemo(() => {\n    if (!window.calculateProgressiveSavings) {\n        console.warn('DynamicPartnerCharts: Progressive savings calculation function not available');\n        return { primary: [], partner: [], combined: [] };\n    }\n\n    try {\n        const data = window.calculateProgressiveSavings(inputs, [], []);\n        return data;\n    } catch (error) {\n        console.warn('DynamicPartnerCharts: Error generating progressive projections:', error);\n        return { primary: [], partner: [], combined: [] };\n    }\n}, [inputs, chartView]);\n\n// Remove the getUnifiedProjectionData useCallback entirely\n// Update getChartData function:\nconst getChartData = (dataType) => {\n    return memoizedChartData[dataType] || [];\n};\n        "
    },
    {
      "file": "src/components/shared/EnhancedFinancialHealthMeter.js",
      "issue": "Unsafe status property access",
      "fix": "\n// Add this helper function at the top of the component:\nconst getSafeStatus = (factorData) => {\n    return factorData?.details?.status || 'unknown';\n};\n\n// Replace status property access with safe access:\n// BEFORE: factorData.details.status === 'excellent'\n// AFTER:  getSafeStatus(factorData) === 'excellent'\n\n// Update getStatusColor calls:\nconst statusColor = getStatusColor(getSafeStatus(factorData));\n        "
    },
    {
      "file": "Create new file: src/components/shared/ErrorBoundary.js",
      "issue": "Missing error boundaries for component crashes",
      "fix": "\nconst ErrorBoundary = ({ children }) => {\n    const [hasError, setHasError] = React.useState(false);\n    const [error, setError] = React.useState(null);\n    \n    React.useEffect(() => {\n        const handleError = (event) => {\n            console.error('ErrorBoundary caught error:', event.error);\n            setHasError(true);\n            setError(event.error);\n        };\n        \n        window.addEventListener('error', handleError);\n        window.addEventListener('unhandledrejection', handleError);\n        \n        return () => {\n            window.removeEventListener('error', handleError);\n            window.removeEventListener('unhandledrejection', handleError);\n        };\n    }, []);\n    \n    if (hasError) {\n        return React.createElement('div', {\n            className: 'error-boundary p-6 bg-red-50 border border-red-200 rounded-lg'\n        }, [\n            React.createElement('h3', {\n                key: 'title',\n                className: 'text-red-800 font-semibold mb-2'\n            }, 'Something went wrong'),\n            React.createElement('p', {\n                key: 'message',\n                className: 'text-red-600 mb-4'\n            }, 'An error occurred while loading this component. Please refresh the page.'),\n            React.createElement('button', {\n                key: 'retry',\n                className: 'btn-primary',\n                onClick: () => {\n                    setHasError(false);\n                    setError(null);\n                }\n            }, 'Try Again')\n        ]);\n    }\n    \n    return children;\n};\n\nwindow.ErrorBoundary = ErrorBoundary;\n        "
    }
  ]
}
name: Deploy to Stage

on:
  push:
    branches: [ stage ]
  workflow_dispatch:

# Permissions for repository operations
permissions:
  contents: write
  pull-requests: write

jobs:
  deploy-stage:
    runs-on: ubuntu-latest
    environment: 
      name: stage
      url: https://ypollak2.github.io/advanced-retirement-planner/stage/
    
    steps:
    - name: Checkout stage branch
      uses: actions/checkout@v4
      with:
        ref: stage
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      
    - name: Checkout gh-pages branch
      uses: actions/checkout@v4
      with:
        ref: gh-pages
        path: gh-pages-repo
        
    - name: Update stage folder in gh-pages
      run: |
        # Remove existing stage folder if it exists
        rm -rf gh-pages-repo/stage
        
        # Create stage directory
        mkdir -p gh-pages-repo/stage
        
        # Copy all files from stage branch to gh-pages/stage/
        find . -maxdepth 1 \
          ! -name . \
          ! -name gh-pages-repo \
          ! -name .git \
          ! -name .github \
          ! -name node_modules \
          -exec cp -r {} gh-pages-repo/stage/ \;
        
    - name: Commit and push to gh-pages
      run: |
        cd gh-pages-repo
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Add changes
        git add stage/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to deploy"
        else
          git commit -m "ðŸš€ Deploy stage: $(date '+%Y-%m-%d %H:%M:%S')"
          git push origin gh-pages
        fi
      
    - name: Comment deployment URL
      uses: actions/github-script@v7
      with:
        script: |
          const repoName = context.payload.repository?.name || context.repo.repo;
          const repoOwner = context.payload.repository?.owner?.login || context.repo.owner;
          
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: 'ðŸš€ **Stage Deployment Complete!**\n\n' +
                  `**Stage URL:** https://${repoOwner}.github.io/${repoName}/stage/\n\n` +
                  '**Tests:** âœ… All tests passed\n' +
                  '**Ready for:** Production merge review\n\n' +
                  `**Commit:** ${context.sha.substring(0, 7)}\n` +
                  `**Branch:** ${context.ref.replace('refs/heads/', '')}\n` +
                  `**Deployed at:** ${new Date().toISOString()}`
          })
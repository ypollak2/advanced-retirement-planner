name: 🚀 Production Deployment Pipeline (No Stage)

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_validation:
        description: 'Skip deployment validation'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PRODUCTION_URL: 'https://ypollak2.github.io/advanced-retirement-planner/'

# Concurrency control - only one deployment at a time
concurrency:
  group: deployment
  cancel-in-progress: false

jobs:
  # Job 1: Pre-deployment Checks
  pre-deployment:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🏷️ Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $VERSION"
          
      - name: ✅ Run tests
        run: |
          echo "🧪 Running all tests..."
          npm test
          
      - name: 📊 Pre-deployment summary
        run: |
          echo "## 🚀 Production Deployment Pipeline Started" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  # Job 2: Production Deployment
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: pre-deployment
    timeout-minutes: 15
    
    environment:
      name: production
      url: ${{ env.PRODUCTION_URL }}
      
    permissions:
      contents: write
      pages: write
      id-token: write
      
    outputs:
      production-status: ${{ steps.deploy.outputs.status }}
      production-url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: 📥 Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🧪 Final production test verification
        run: |
          echo "🧪 Running final tests before production deployment..."
          npm test
          
      - name: 📥 Checkout gh-pages branch for production
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages-repo
          
      - name: 🌟 Deploy to production (root)
        id: deploy
        run: |
          echo "🌟 Deploying to production environment..."
          
          # Copy all files to gh-pages root
          find . -maxdepth 1 \
            ! -name . \
            ! -name gh-pages-repo \
            ! -name .git \
            ! -name .github \
            ! -name node_modules \
            ! -name '*.log' \
            -exec cp -r {} gh-pages-repo/ \;
          
          # Create production version indicator
          echo "<!-- Production Deployment v${{ needs.pre-deployment.outputs.version }} - $(date) -->" >> gh-pages-repo/index.html
          
          cd gh-pages-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add all changes
          git add -A
          
          if git diff --staged --quiet; then
            echo "status=no-changes" >> $GITHUB_OUTPUT
            echo "url=${{ env.PRODUCTION_URL }}" >> $GITHUB_OUTPUT
            echo "No changes to deploy to production"
          else
            git commit -m "🎉 Deploy to production: v${{ needs.pre-deployment.outputs.version }} ($(date '+%Y-%m-%d %H:%M:%S'))"
            git push origin gh-pages
            
            echo "status=deployed" >> $GITHUB_OUTPUT
            echo "url=${{ env.PRODUCTION_URL }}" >> $GITHUB_OUTPUT
            echo "✅ Production deployment completed"
          fi

  # Job 3: Production Validation
  validate-production:
    name: ✅ Validate Production Deployment  
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-production]
    if: needs.deploy-production.outputs.production-status != 'skipped' && !github.event.inputs.skip_validation
    timeout-minutes: 10
    
    outputs:
      validation-status: ${{ steps.validate.outputs.status }}
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: ⏳ Wait for production deployment
        run: |
          echo "⏳ Waiting for production deployment to propagate..."
          sleep 90
          
      - name: ✅ Validate production deployment
        id: validate
        run: |
          echo "✅ Validating production deployment..."
          
          MAX_ATTEMPTS=15
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "🔍 Attempt $ATTEMPT: Checking production availability..."
            
            if curl -sSf "${{ env.PRODUCTION_URL }}" > /dev/null; then
              echo "✅ Production deployment is accessible"
              
              # Check for version indicator
              if curl -s "${{ env.PRODUCTION_URL }}" | grep -q "v${{ needs.pre-deployment.outputs.version }}"; then
                echo "✅ Correct version deployed to production"
                echo "status=success" >> $GITHUB_OUTPUT
                break
              else
                echo "⚠️ Version mismatch detected"
              fi
              
            else
              echo "❌ Production deployment not accessible yet"
            fi
            
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "status=failed" >> $GITHUB_OUTPUT
              echo "❌ Production validation failed after $MAX_ATTEMPTS attempts"
              exit 1
            fi
            
            echo "⏳ Waiting 30 seconds before retry..."
            sleep 30
            ATTEMPT=$((ATTEMPT + 1))
          done

  # Job 4: Deployment Summary
  deployment-summary:
    name: 📊 Deployment Summary
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-production, validate-production]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 📊 Generate deployment summary
        run: |
          echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.pre-deployment.outputs.version || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Production deployment summary  
          echo "### 🌟 Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ env.PRODUCTION_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation**: ${{ needs.validate-production.result || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.deploy-production.result }}" == "success" && "${{ needs.validate-production.result }}" == "success" ]]; then
            echo "🎉 **DEPLOYMENT SUCCESSFUL**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **DEPLOYMENT FAILED**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated by Production Deployment Pipeline workflow*" >> $GITHUB_STEP_SUMMARY
name: 🚀 Deployment Pipeline

on:
  workflow_run:
    workflows: ["🔄 CI Pipeline (Main)"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_validation:
        description: 'Skip deployment validation'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PRODUCTION_URL: 'https://ypollak2.github.io/advanced-retirement-planner/'

# Concurrency control - only one deployment at a time
concurrency:
  group: deployment
  cancel-in-progress: false

jobs:
  # Job 1: Pre-deployment Checks
  pre-deployment:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    if: |
      (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main') ||
      github.event_name == 'workflow_dispatch'
    timeout-minutes: 10
    
    outputs:
      deploy-production: ${{ steps.check.outputs.production }}
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🏷️ Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $VERSION"
          
      - name: ✅ Deployment readiness check
        id: check
        run: |
          echo "🔍 Checking deployment readiness..."
          
          # Run comprehensive pre-deployment validation
          if npm run validate:pre-work 2>/dev/null; then
            echo "✅ Pre-deployment validation passed"
          else
            echo "⚠️ Pre-deployment validation script not found, running basic checks"
            
            # Basic validation
            if [ ! -f "index.html" ] || [ ! -f "package.json" ]; then
              echo "❌ Missing essential files"
              exit 1
            fi
          fi
          
          # Always deploy to production directly
          echo "production=true" >> $GITHUB_OUTPUT
          
      - name: 📊 Pre-deployment summary
        run: |
          echo "### 📋 Pre-deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Version: **v${{ steps.version.outputs.version }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: **${{ github.ref_name }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: **${{ github.event_name }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Production: ✅ Yes" >> $GITHUB_STEP_SUMMARY

  # Job 2: Production Deployment
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.deploy-production == 'true'
    timeout-minutes: 20
    
    environment:
      name: production
      url: ${{ env.PRODUCTION_URL }}
      
    permissions:
      contents: write
      pages: write
      id-token: write
      
    outputs:
      production-status: ${{ steps.deploy.outputs.status }}
      production-url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: 📥 Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}
          
      - name: 📥 Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages-repo
          
      - name: 🚀 Deploy to production
        id: deploy
        run: |
          echo "🚀 Deploying to production environment..."
          
          # Copy all files to gh-pages root
          rsync -av --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='gh-pages-repo' \
            --exclude='.github' \
            --exclude='scripts' \
            --exclude='test-*.js' \
            --exclude='*.test.js' \
            --exclude='coverage' \
            --exclude='.env*' \
            --exclude='*.log' \
            --exclude='.DS_Store' \
            ./ gh-pages-repo/
          
          # Update version in manifest
          cd gh-pages-repo
          if [ -f "manifest.json" ]; then
            jq '.version = "'${{ needs.pre-deployment.outputs.version }}'"' manifest.json > temp.json && mv temp.json manifest.json
          fi
          
          # Commit and push changes
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add -A
          
          if git diff --staged --quiet; then
            echo "status=skipped" >> $GITHUB_OUTPUT
            echo "url=${{ env.PRODUCTION_URL }}" >> $GITHUB_OUTPUT
            echo "No changes to deploy to production"
          else
            git commit -m "🚀 Deploy to production: v${{ needs.pre-deployment.outputs.version }} ($(date '+%Y-%m-%d %H:%M:%S'))"
            git push origin gh-pages
            
            echo "status=success" >> $GITHUB_OUTPUT
            echo "url=${{ env.PRODUCTION_URL }}" >> $GITHUB_OUTPUT
            echo "✅ Production deployment completed"
          fi

  # Job 3: Production Validation
  validate-production:
    name: ✅ Validate Production Deployment
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-production]
    if: needs.deploy-production.outputs.production-status != 'skipped' && !github.event.inputs.skip_validation
    timeout-minutes: 15
    
    outputs:
      validation-status: ${{ steps.validate.outputs.status }}
      
    steps:
      - name: ⏳ Wait for production deployment
        run: |
          echo "⏳ Waiting for production deployment to propagate..."
          sleep 60  # Wait 1 minute for GitHub Pages to update
          
      - name: ✅ Validate production deployment
        id: validate
        run: |
          echo "✅ Validating production deployment..."
          
          MAX_ATTEMPTS=10
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "🔍 Attempt $ATTEMPT: Checking production availability..."
            
            if curl -sSf "${{ env.PRODUCTION_URL }}" > /dev/null; then
              echo "✅ Production deployment is accessible"
              
              # Check version
              if curl -s "${{ env.PRODUCTION_URL }}" | grep -q "v${{ needs.pre-deployment.outputs.version }}"; then
                echo "✅ Version verified: v${{ needs.pre-deployment.outputs.version }}"
                echo "status=success" >> $GITHUB_OUTPUT
                exit 0
              else
                echo "⚠️ Version mismatch - waiting..."
              fi
            else
              echo "❌ Production deployment not accessible yet"
            fi
            
            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              sleep 30
            else
              echo "❌ Production validation failed after $MAX_ATTEMPTS attempts"
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
          done
          
      - name: 🔐 Security headers check
        if: steps.validate.outputs.status == 'success'
        continue-on-error: true
        run: |
          echo "🔐 Checking security headers..."
          curl -sI "${{ env.PRODUCTION_URL }}" | grep -E "(X-Frame-Options|X-Content-Type-Options|Referrer-Policy)" || echo "⚠️ Some security headers may be missing"
          
      - name: 📊 Production validation summary
        run: |
          echo "### 🚀 Production Deployment Result" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ needs.deploy-production.outputs.production-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ needs.pre-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ steps.validate.outputs.status == 'success' && '✅ Validated' || '❌ Validation Failed' }}" >> $GITHUB_STEP_SUMMARY

  # Job 4: Post-deployment Tasks
  post-deployment:
    name: 📋 Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-production, validate-production]
    if: always() && needs.deploy-production.result != 'skipped'
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}
          
      - name: 📊 Generate deployment summary
        run: |
          echo "### 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Production deployment summary
          echo "### 🚀 Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ env.PRODUCTION_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation**: ${{ needs.validate-production.result || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.deploy-production.result }}" == "success" && "${{ needs.validate-production.result }}" == "success" ]]; then
            echo "## ✅ **DEPLOYMENT SUCCESSFUL**" >> $GITHUB_STEP_SUMMARY
            echo "Version **v${{ needs.pre-deployment.outputs.version }}** has been successfully deployed to production!" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "## 🚀 **PRODUCTION DEPLOYMENT SUCCESSFUL**" >> $GITHUB_STEP_SUMMARY
            echo "Version **v${{ needs.pre-deployment.outputs.version }}** deployed, validation pending." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ **DEPLOYMENT FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs for more information." >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: 💬 Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const deploymentStatus = {
              production: '${{ needs.deploy-production.result }}',
              productionValidation: '${{ needs.validate-production.result }}',
              version: '${{ needs.pre-deployment.outputs.version }}'
            };
            
            let comment = `## 🚀 Deployment Status\n\n`;
            comment += `**Version**: v${deploymentStatus.version}\n\n`;
            
            if (deploymentStatus.production === 'success') {
              comment += `🚀 **Production**: ✅ Deployed to ${{ env.PRODUCTION_URL }}\n`;
            } else if (deploymentStatus.production === 'failure') {
              comment += `🚀 **Production**: ❌ Deployment failed\n`;
            }
            
            if (deploymentStatus.productionValidation === 'success') {
              comment += `✅ **Validation**: All checks passed\n`;
            } else if (deploymentStatus.productionValidation === 'failure') {
              comment += `❌ **Validation**: Checks failed\n`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: 📈 Update deployment metrics
        if: needs.validate-production.result == 'success'
        continue-on-error: true
        run: |
          echo "📈 Recording deployment metrics..."
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          VERSION="${{ needs.pre-deployment.outputs.version }}"
          
          # Create or update deployment metrics file
          mkdir -p .metrics
          echo "{
            \"timestamp\": \"$TIMESTAMP\",
            \"version\": \"$VERSION\",
            \"production_status\": \"${{ needs.deploy-production.result }}\",
            \"validation_status\": \"${{ needs.validate-production.result }}\",
            \"trigger\": \"${{ github.event_name }}\",
            \"duration_minutes\": \"${{ github.run_number }}\"
          }" > .metrics/deployment-$VERSION.json
          
          echo "✅ Deployment metrics recorded"
          
      - name: 🔔 Send deployment notification
        if: always()
        continue-on-error: true
        run: |
          STATUS="${{ needs.validate-production.result == 'success' && '✅ SUCCESS' || '❌ FAILED' }}"
          echo "🔔 Deployment $STATUS for v${{ needs.pre-deployment.outputs.version }}"
          
          # Add notification logic here (e.g., Slack, Discord, email)
          # This is a placeholder for notification integration